<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小六的假想敌</title>
  <subtitle>一起聊聊技术人生那点事儿(Thinking In Tech-Life)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wpneu.github.io/"/>
  <updated>2017-07-30T07:21:47.829Z</updated>
  <id>https://wpneu.github.io/</id>
  
  <author>
    <name>王志平(Gavin.Wang)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BlueLake博客主题的详细配置</title>
    <link href="https://wpneu.github.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html"/>
    <id>https://wpneu.github.io/2016/12/29/BlueLake博客主题的详细配置.html</id>
    <published>2016-12-29T03:25:33.000Z</published>
    <updated>2017-07-30T07:21:47.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p><a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="external">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p>
<p>在阅读本文之前，假定您已经成功安装了<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<blockquote>
<p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p>
</blockquote>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="external">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p>
<h4 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</div></pre></td></tr></table></figure></p>
<h4 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-renderer-jade@0.3.0 --save</div><div class="line">$ npm install hexo-renderer-stylus --save</div></pre></td></tr></table></figure></p>
<h4 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">BlueLake</span></div></pre></td></tr></table></figure></p>
<h4 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure></p>
<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>
<h4 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/BlueLake</div><div class="line">git pull</div></pre></td></tr></table></figure></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> </div><div class="line"><span class="attr">subtitle:</span> </div><div class="line"><span class="attr">description:</span> </div><div class="line"><span class="attr">author:</span></div></pre></td></tr></table></figure></p>
<p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p>
<h4 id="2-2-设置语言"><a href="#2-2-设置语言" class="headerlink" title="2.2 设置语言"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div></pre></td></tr></table></figure></p>
<h4 id="2-3-设置菜单"><a href="#2-3-设置菜单" class="headerlink" title="2.3 设置菜单"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  - page:</span> <span class="string">home</span></div><div class="line"><span class="attr">    directory:</span> <span class="string">.</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></div><div class="line"><span class="attr">  - page:</span> <span class="string">archive</span></div><div class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></div><div class="line">  <span class="comment"># - page: about</span></div><div class="line">  <span class="comment">#   directory: about/</span></div><div class="line">  <span class="comment">#   icon: fa-user</span></div><div class="line"><span class="attr">  - page:</span> <span class="string">rss</span></div><div class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></div></pre></td></tr></table></figure></p>
<p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># About page </span></div><div class="line"><span class="attr">about:</span></div><div class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></div><div class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></div><div class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></div></pre></td></tr></table></figure></p>
<h5 id="2-3-1-添加about页"><a href="#2-3-1-添加about页" class="headerlink" title="2.3.1 添加about页"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">'about'</span></div></pre></td></tr></table></figure></p>
<p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># About page </span></div><div class="line"><span class="attr">about:</span></div><div class="line"><span class="attr">  photo_url:</span> <span class="comment">## 头像的链接地址</span></div><div class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></div><div class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></div><div class="line"><span class="attr">  weibo_name:</span> <span class="comment">## 微博用户名 </span></div><div class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></div><div class="line"><span class="attr">  github_name:</span> <span class="comment">## github用户名</span></div></pre></td></tr></table></figure></p>
<p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p>
<h5 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div><div class="line">$ npm install hexo-generator-sitemap --save</div><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>添加<code>主题_config.yml</code>配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Plugins:</span></div><div class="line">  <span class="string">hexo-generator-feed</span></div><div class="line">  <span class="string">hexo-generator-sitemap</span></div><div class="line">  <span class="string">hexo-generator-baidu-sitemap</span></div><div class="line"></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">atom</span></div><div class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div><div class="line"></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></div></pre></td></tr></table></figure></p>
<h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a>来创建JSON数据文件：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure></p>
<p>然后在<code>根_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  pages:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>最后在<code>主题_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">local_search:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h4 id="2-5-修改站点图标"><a href="#2-5-修改站点图标" class="headerlink" title="2.5 修改站点图标"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p>
<h4 id="2-6-添加站点关键字"><a href="#2-6-添加站点关键字" class="headerlink" title="2.6 添加站点关键字"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> <span class="string">Hexo</span></div><div class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></div><div class="line"><span class="attr">description:</span> <span class="string">网站简要描述,如：Charles·Zheng's</span> <span class="string">blog.</span></div><div class="line"><span class="attr">keywords:</span> <span class="string">网站关键字,</span> <span class="string">key,</span> <span class="string">key1,</span> <span class="string">key2,</span> <span class="string">key3</span></div><div class="line"><span class="attr">author:</span> <span class="string">Charles</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div></pre></td></tr></table></figure></p>
<h4 id="2-7-其他配置"><a href="#2-7-其他配置" class="headerlink" title="2.7 其他配置"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p>
<ol>
<li><code>show_category_count</code>——是否显示分类下的文章数。</li>
<li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> </div><div class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-集成第三方服务"><a href="#3-集成第三方服务" class="headerlink" title="3.集成第三方服务"></a>3.集成第三方服务</h3><h4 id="3-1-添加评论"><a href="#3-1-添加评论" class="headerlink" title="3.1 添加评论"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href="http://duoshuo.com" target="_blank" rel="external">多说评论</a>、<a href="https://disqus.com" target="_blank" rel="external">Disqus评论</a>、<a href="https://livere.com" target="_blank" rel="external">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="external">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="external">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com" target="_blank" rel="external">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p>
<ol>
<li>注册并获得代码。<ul>
<li>若使用<a href="http://duoshuo.com" target="_blank" rel="external">多说评论</a>，注册多说后获得short_name。</li>
<li>若使用<a href="https://disqus.com" target="_blank" rel="external">Disqus评论</a>，注册Disqus后获得short_name。</li>
<li>若使用<a href="https://livere.com" target="_blank" rel="external">来必力评论</a>，注册来必力,获得data-uid。</li>
<li>若使用<a href="http://www.uyan.cc/" target="_blank" rel="external">友言评论</a>，注册友言,获得uid。</li>
<li>若使用<a href="https://gentie.163.com/info.html" target="_blank" rel="external">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li>
<li>若使用<a href="http://changyan.kuaizhan.com" target="_blank" rel="external">畅言评论</a>，注册畅言，获得appid，appkey。</li>
</ul>
</li>
<li>配置<code>主题_config.yml</code>：<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Cmments</span></div><div class="line"><span class="attr">comment:</span></div><div class="line"><span class="attr">  duoshuo:</span> <span class="comment">## duoshuo_shortname</span></div><div class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></div><div class="line"><span class="attr">  livere:</span> <span class="comment">## 来必力(data-uid)</span></div><div class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></div><div class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></div><div class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></div><div class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></div><div class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="3-2-百度统计"><a href="#3-2-百度统计" class="headerlink" title="3.2 百度统计"></a>3.2 百度统计</h4><ol>
<li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>，定位到站点的代码获取页面。</li>
<li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li>
<li>配置<code>主题_config.yml</code>:<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">baidu_analytics:</span> <span class="number">8006843039519956000</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p>
</blockquote>
<h4 id="3-3-卜算子阅读次数统计"><a href="#3-3-卜算子阅读次数统计" class="headerlink" title="3.3 卜算子阅读次数统计"></a>3.3 卜算子阅读次数统计</h4><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p>
<h4 id="3-4-微博秀"><a href="#3-4-微博秀" class="headerlink" title="3.4 微博秀"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href="http://open.weibo.com/" target="_blank" rel="external">微博开放平台</a>获取您自己的微博秀代码来替换。</p>
<ol>
<li>登录<a href="http://open.weibo.com/" target="_blank" rel="external">微博开放平台</a>，选择微博秀。</li>
<li>为了与主题风格统一，作如下配置<ul>
<li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li>
<li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li>
<li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li>
</ul>
</li>
<li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class="highlight stylus"><figcaption><span>weibo.jade</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade" target="_blank" rel="external">layout/_widget/weibo.jade</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line marked">.widget</div><div class="line">  .widget-title</div><div class="line">    i(class=<span class="string">'fa fa-weibo'</span>)= <span class="string">' '</span> + __(<span class="string">'新浪微博'</span>)</div><div class="line">  iframe(<span class="attribute">width</span>=<span class="string">"100%"</span>,height=<span class="string">"400"</span>,class=<span class="string">"share_self"</span>,frameborder=<span class="string">"0"</span>,scrolling=<span class="string">"no"</span>,src=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1"</span>)</div></pre></td></tr></table></figure>
这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote>
<p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/chaooo/hexo-theme-BlueLake&quot; target
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://wpneu.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://wpneu.github.io/tags/hexo/"/>
    
      <category term="BlueLake" scheme="https://wpneu.github.io/tags/BlueLake/"/>
    
  </entry>
  
  <entry>
    <title>自定义HEXO站内搜索Javascript+json</title>
    <link href="https://wpneu.github.io/2016/11/09/%E8%87%AA%E5%AE%9A%E4%B9%89HEXO%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2Javascript-json.html"/>
    <id>https://wpneu.github.io/2016/11/09/自定义HEXO站内搜索Javascript-json.html</id>
    <published>2016-11-09T01:24:56.000Z</published>
    <updated>2017-07-30T07:21:47.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>目前很多<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure>
<p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">meta: &#123;</div><div class="line">    title: hexo.config.title,</div><div class="line">    subtitle: hexo.config.subtitle,</div><div class="line">    description: hexo.config.description,</div><div class="line">    author: hexo.config.author,</div><div class="line">    url: hexo.config.url</div><div class="line">&#125;,</div><div class="line">pages: [&#123; //-&gt; all pages</div><div class="line">    title: page.title,</div><div class="line">    slug: page.slug,</div><div class="line">    date: page.date,</div><div class="line">    updated: page.updated,</div><div class="line">    comments: page.comments,</div><div class="line">    permalink: page.permalink,</div><div class="line">    path: page.path,</div><div class="line">    excerpt: page.excerpt, //-&gt; only text ;)</div><div class="line">    keywords: null //-&gt; it needs settings</div><div class="line">    text: page.content, //-&gt; only text minified ;)</div><div class="line">    raw: page.raw, //-&gt; original MD content</div><div class="line">    content: page.content //-&gt; final HTML content</div><div class="line">&#125;],</div><div class="line">posts: [&#123; //-&gt; only published posts</div><div class="line">    title: post.title,</div><div class="line">    slug: post.slug,</div><div class="line">    date: post.date,</div><div class="line">    updated: post.updated,</div><div class="line">    comments: post.comments,</div><div class="line">    permalink: post.permalink,</div><div class="line">    path: post.path,</div><div class="line">    excerpt: post.excerpt, //-&gt; only text ;)</div><div class="line">    keywords: null //-&gt; it needs settings</div><div class="line">    text: post.content, //-&gt; only text minified ;)</div><div class="line">    raw: post.raw, //-&gt; original MD content</div><div class="line">    content: post.content, //-&gt; final HTML content</div><div class="line">    categories: [&#123;</div><div class="line">        name: category.name,</div><div class="line">        slug: category.slug,</div><div class="line">        permalink: category.permalink</div><div class="line">    &#125;],</div><div class="line">    tags: [&#123;</div><div class="line">        name: tag.name,</div><div class="line">        slug: tag.slug,</div><div class="line">        permalink: tag.permalink</div><div class="line">    &#125;]</div><div class="line">&#125;]</div></pre></td></tr></table></figure></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  keywords:</span> <span class="literal">false</span> <span class="comment"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></div><div class="line"><span class="attr">  pages:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    keywords:</span> <span class="literal">true</span> <span class="comment"># but only if root keywords option language was set</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    keywords:</span> <span class="literal">true</span> <span class="comment"># but only if root keywords option language was set</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  pages:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span> <span class="comment">#文章标题</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span> <span class="comment">#发表日期</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span> <span class="comment">#路径</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span> <span class="comment">#文本字段</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">true</span> <span class="comment">#标签</span></div></pre></td></tr></table></figure></p>
<p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"自定义HEXO站内搜索Javascript+json"</span>,</div><div class="line">  <span class="attr">"date"</span>: <span class="string">"2016-11-09T01:24:56.000Z"</span>,</div><div class="line">  <span class="attr">"path"</span>: <span class="string">"2016/11/09/自定义HEXO站内搜索Javascript-json.html"</span>,</div><div class="line">  <span class="attr">"text"</span>: <span class="string">"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容"</span>,</div><div class="line">  <span class="attr">"tags"</span>: [&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"javascript,hexo"</span>,</div><div class="line">    <span class="attr">"slug"</span>: <span class="string">"javascript-hexo"</span>,</div><div class="line">    <span class="attr">"permalink"</span>: <span class="string">"http://chaoo.oschina.io/tags/javascript-hexo/"</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-JavaScript实现代码"><a href="#3-JavaScript实现代码" class="headerlink" title="3.JavaScript实现代码"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p>
<h4 id="3-1-xhr加载数据"><a href="#3-1-xhr加载数据" class="headerlink" title="3.1 xhr加载数据"></a>3.1 xhr加载数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searchData;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">success</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!searchData) &#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'/content.json'</span>, <span class="literal">true</span>);</div><div class="line">        xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status &gt;= <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.status &lt; <span class="number">300</span>) &#123;</div><div class="line">                <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.response || <span class="keyword">this</span>.responseText);</div><div class="line">                searchData = res <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? res : res.posts;</div><div class="line">                success(searchData);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">console</span>.error(<span class="keyword">this</span>.statusText);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="keyword">this</span>.statusText);</div><div class="line">        &#125;;</div><div class="line">        xhr.send();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        success(searchData);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-2-匹配文章内容返回结果"><a href="#3-2-匹配文章内容返回结果" class="headerlink" title="3.2 匹配文章内容返回结果"></a>3.2 匹配文章内容返回结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">matcher</span>(<span class="params">post, regExp</span>) </span>&#123;</div><div class="line">    <span class="comment">// 匹配优先级：title &gt; tags &gt; text</span></div><div class="line">    <span class="keyword">return</span> regtest(post.title, regExp) || post.tags.some(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> regtest(tag.name, regExp);</div><div class="line">    &#125;) || regtest(post.text, regExp);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">regtest</span>(<span class="params">raw, regExp</span>) </span>&#123;</div><div class="line">    regExp.lastIndex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> regExp.test(raw);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-结果渲染到页面"><a href="#3-3-结果渲染到页面" class="headerlink" title="3.3 结果渲染到页面"></a>3.3 结果渲染到页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> html = <span class="string">''</span>;</div><div class="line">    <span class="keyword">if</span> (data.length) &#123;</div><div class="line">        html = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> tpl(searchTpl, &#123;</div><div class="line">                title: post.title,</div><div class="line">                path: post.path,</div><div class="line">                date: <span class="keyword">new</span> <span class="built_in">Date</span>(post.date).toLocaleDateString(),</div><div class="line">                tags: post.tags.map(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">'&lt;span&gt;'</span> + tag.name + <span class="string">'&lt;/span&gt;'</span>;</div><div class="line">                &#125;).join(<span class="string">''</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;).join(<span class="string">''</span>);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-查询匹配"><a href="#3-3-查询匹配" class="headerlink" title="3.3 查询匹配"></a>3.3 查询匹配</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="comment">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></div><div class="line">    <span class="comment">// a b c =&gt; /a|b|c/gmi</span></div><div class="line">    <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key.replace(<span class="regexp">/[ ]/g</span>, <span class="string">'|'</span>), <span class="string">'gmi'</span>);</div><div class="line">    loadData(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> matcher(post, regExp);</div><div class="line">        &#125;);</div><div class="line">        render(result);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;目前很多&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://wpneu.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://wpneu.github.io/tags/hexo/"/>
    
      <category term="javascript" scheme="https://wpneu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>github博客迁移</title>
    <link href="https://wpneu.github.io/2016/08/17/github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB.html"/>
    <id>https://wpneu.github.io/2016/08/17/github博客迁移.html</id>
    <published>2016-08-17T03:14:25.000Z</published>
    <updated>2017-07-30T07:21:47.852Z</updated>
    
    <content type="html"><![CDATA[<p>由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。</p>
<h3 id="1-迁移代码"><a href="#1-迁移代码" class="headerlink" title="1.迁移代码"></a>1.迁移代码</h3><p>把代码从<a href="https://github.com/" target="_blank" rel="external">github</a>迁移至<a href="http://git.oschina.net/" target="_blank" rel="external">码云（oschina）</a>。<br>首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。<br>码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。<br><a id="more"></a><br>在GitHub上，可以新建一个以<code>用户名</code>命名的仓库，将网站代码放在master分支下，即可自动部署到：<code>http://用户名.github.io/</code>，若其他命名的仓库则新建一个<code>gh-pages</code>的分支，网站代码放在<code>gh-pages</code>下，，即可自动部署到：<code>http://用户名.github.io/仓库名/</code>。<br>对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在<code>osc-pages</code>下，但可自定到自己喜欢的分支上。<br>代码迁移步骤如下：</p>
<h5 id="1-1-新建码云项目"><a href="#1-1-新建码云项目" class="headerlink" title="1.1 新建码云项目"></a>1.1 新建码云项目</h5><p>以我自己的博客为例，项目地址：<a href="https://github.com/chaooo/chaooo.github.io.git" target="_blank" rel="external">https://github.com/chaooo/chaooo.github.io.git</a>。<br>它在Github上的Pages地址是：<a href="http://chaooo.github.io" target="_blank" rel="external">http://chaooo.github.io</a><br>如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的<code>+</code>号，选择新建项目:<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg" alt="博客迁移至码云1"></p>
<h5 id="1-2-开启pages服务"><a href="#1-2-开启pages服务" class="headerlink" title="1.2 开启pages服务"></a>1.2 开启pages服务</h5><p>然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的<code>Pages</code>,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg" alt="博客迁移至码云2"><br>至此，博客已经部署成功，访问提供的地址：<a href="http://chaoo.oschina.io" target="_blank" rel="external">http://chaoo.oschina.io</a>即可查看到我的博客。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg" alt="博客迁移至码云3"></p>
<h3 id="2-修改hexo配置"><a href="#2-修改hexo配置" class="headerlink" title="2.修改hexo配置"></a>2.修改hexo配置</h3><p>打开博客根目录的_config.yml文件，找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: http://chaooo.github.io</div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>修改为(根据自己的仓库地址修改)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="comment">#url: http://chaooo.github.io</span></div><div class="line">url: http://chaoo.oschina.io</div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line"><span class="comment">#- type: git</span></div><div class="line"><span class="comment">#  repository: https://github.com/chaooo/chaooo.github.io.git</span></div><div class="line"><span class="comment">#  branch: master</span></div><div class="line">- <span class="built_in">type</span>: git</div><div class="line">  repository: https://git.oschina.net/chaoo/chaoo.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>然后执行下面命令，以重新生成<code>baidusitemap.xml</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate -d</div></pre></td></tr></table></figure></p>
<h4 id="3-验证网站"><a href="#3-验证网站" class="headerlink" title="3.验证网站"></a>3.验证网站</h4><p>百度搜索引擎入口：<br><a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="external">百度搜索引擎入口</a>。<br>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>public/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p>
<h3 id="4-sitemap提交"><a href="#4-sitemap提交" class="headerlink" title="4.sitemap提交"></a>4.sitemap提交</h3><p>直接点击<code>sitemap</code>填写数据文件地址：<code>http://chaoo.oschina.io/baidusitemap.xml</code>,输入验证码提交。</p>
<h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\themes\landscape\layout\_partial\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</div><div class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</div><div class="line">    s.parentNode.insertBefore(bp, s);</div><div class="line">&#125;)();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样就可以等待百度收录了。</p>
<p><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg" alt="博客迁移至码云4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。&lt;/p&gt;
&lt;h3 id=&quot;1-迁移代码&quot;&gt;&lt;a href=&quot;#1-迁移代码&quot; class=&quot;headerlink&quot; title=&quot;1.迁移代码&quot;&gt;&lt;/a&gt;1.迁移代码&lt;/h3&gt;&lt;p&gt;把代码从&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;迁移至&lt;a href=&quot;http://git.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;码云（oschina）&lt;/a&gt;。&lt;br&gt;首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。&lt;br&gt;码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://wpneu.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://wpneu.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://wpneu.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>好用的Web包管理器-Bower</title>
    <link href="https://wpneu.github.io/2016/08/12/Web%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-Bower.html"/>
    <id>https://wpneu.github.io/2016/08/12/Web包管理器-Bower.html</id>
    <published>2016-08-12T07:32:41.000Z</published>
    <updated>2017-07-30T07:21:47.852Z</updated>
    
    <content type="html"><![CDATA[<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。<br><a id="more"></a> </p>
<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>在安装<a href="https://bower.io/" target="_blank" rel="external">bower</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="external">Git</a>。</p>
<h3 id="1-安装Bower"><a href="#1-安装Bower" class="headerlink" title="1.安装Bower"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g bower   <span class="comment">#全局安装bower</span></div></pre></td></tr></table></figure></p>
<p>移步<a href="https://github.com/bower/bower/wiki/Troubleshooting" target="_blank" rel="external">这里</a>查看不同平台上安装的问题。</p>
<h3 id="2-使用Bower"><a href="#2-使用Bower" class="headerlink" title="2.使用Bower"></a>2.使用Bower</h3><p>使用help命令查看帮助。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">bower <span class="built_in">help</span></div><div class="line"></div><div class="line">Usage:</div><div class="line">    bower &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</div><div class="line">Commands:</div><div class="line">    cache                   Manage bower cache</div><div class="line">    <span class="built_in">help</span>                    Display <span class="built_in">help</span> information about Bower</div><div class="line">    home                    Opens a package homepage into your favorite browser</div><div class="line">    info                    Info of a particular package</div><div class="line">    init                    Interactively create a bower.json file</div><div class="line">    install                 Install a package locally</div><div class="line">    link                    Symlink a package folder</div><div class="line">    list                    List <span class="built_in">local</span> packages - and possible updates</div><div class="line">    login                   Authenticate with GitHub and store credentials</div><div class="line">    lookup                  Look up a package URL by name</div><div class="line">    prune                   Removes <span class="built_in">local</span> extraneous packages</div><div class="line">    register                Register a package</div><div class="line">    search                  Search <span class="keyword">for</span> a package by name</div><div class="line">    update                  Update a <span class="built_in">local</span> package</div><div class="line">    uninstall               Remove a <span class="built_in">local</span> package</div><div class="line">    unregister              Remove a package from the registry</div><div class="line">    version                 Bump a package version</div><div class="line">Options:</div><div class="line">    -f, --force             Makes various commands more forceful</div><div class="line">    -j, --json              Output consumable JSON</div><div class="line">    -l, --loglevel          What level of logs to report</div><div class="line">    -o, --offline           Do not hit the network</div><div class="line">    -q, --quiet             Only output important information</div><div class="line">    -s, --silent            Do not output anything, besides errors</div><div class="line">    -V, --verbose           Makes output more verbose</div><div class="line">    --allow-root            Allows running commands as root</div><div class="line">    -v, --version           Output Bower version</div><div class="line">    --no-color              Disable colors</div><div class="line">See <span class="string">'bower help &lt;command&gt;'</span> <span class="keyword">for</span> more information on a specific <span class="built_in">command</span>.</div></pre></td></tr></table></figure></p>
<h3 id="3-安装包到本地"><a href="#3-安装包到本地" class="headerlink" title="3.安装包到本地"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install &lt;package&gt;    <span class="comment">#package为包名</span></div></pre></td></tr></table></figure></p>
<p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bower install  <span class="comment"># 通过 bower.json 文件安装</span></div><div class="line">bower install jquery   <span class="comment"># 通过在github上注册的包名安装</span></div><div class="line">bower install desandro/masonry   <span class="comment"># GitHub短链接</span></div><div class="line">bower install git://github.com/user/package.git   <span class="comment"># Github上的 .git</span></div><div class="line">bower install http://example.com/script.js   <span class="comment"># URL</span></div></pre></td></tr></table></figure></p>
<p>安装选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-F, --force-latest: Force latest version on conflict</div><div class="line">-p, --production: Do not install project devDependencies</div><div class="line">-S, --save: Save installed packages into the project’s bower.json dependencies</div><div class="line">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</div><div class="line">-E, --save-exact: Configure installed packages with an exact version rather than semver</div></pre></td></tr></table></figure></p>
<h3 id="4-用bower-json文件来管理依赖"><a href="#4-用bower-json文件来管理依赖" class="headerlink" title="4.用bower.json文件来管理依赖"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower init</div></pre></td></tr></table></figure></p>
<p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p>
<h3 id="5-使用下载好的包"><a href="#5-使用下载好的包" class="headerlink" title="5.使用下载好的包"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bower_components/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="6-更新包"><a href="#6-更新包" class="headerlink" title="6.更新包"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower update jquery</div></pre></td></tr></table></figure></p>
<p>这样就可以自动升级到最新版的jquery了。<br>更新选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-F, --force-latest: Force latest version on conflict</div><div class="line">-p, --production: Do not install project devDependencies</div><div class="line">-S, --save: Update dependencies <span class="keyword">in</span> bower.json</div><div class="line">-D, --save-dev: Update devDependencies <span class="keyword">in</span> bower.json</div></pre></td></tr></table></figure></p>
<h3 id="7-搜索包"><a href="#7-搜索包" class="headerlink" title="7.搜索包"></a>7.搜索包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bower search               <span class="comment">#搜索所有包</span></div><div class="line">bower search &lt;packageName&gt; <span class="comment">#搜索指定名称的包</span></div></pre></td></tr></table></figure>
<p>或者可以在<a href="https://bower.io/search/" target="_blank" rel="external">这里:https://bower.io/search/</a>搜索喜欢的包.</p>
<h3 id="8-卸载包"><a href="#8-卸载包" class="headerlink" title="8.卸载包"></a>8.卸载包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</div></pre></td></tr></table></figure>
<p>卸载选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</div><div class="line">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。&lt;br&gt;
    
    </summary>
    
      <category term="前端工具" scheme="https://wpneu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="bower" scheme="https://wpneu.github.io/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记(2)</title>
    <link href="https://wpneu.github.io/2016/07/30/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2).html"/>
    <id>https://wpneu.github.io/2016/07/30/MongoDB学习笔记(2).html</id>
    <published>2016-07-30T00:20:16.000Z</published>
    <updated>2017-07-30T07:21:47.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="part2-CRUD操作-Creat-Read-Update-Delete"><a href="#part2-CRUD操作-Creat-Read-Update-Delete" class="headerlink" title="part2 CRUD操作(Creat,Read,Update,Delete)"></a>part2 CRUD操作(Creat,Read,Update,Delete)</h2><h3 id="一、基础："><a href="#一、基础：" class="headerlink" title="一、基础："></a>一、基础：</h3><p>1、document(文档)</p>
<p>MongoDB把所有数据存放在类似于JSON数据结构的文档内：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"item"</span>: <span class="string">"pencil"</span>, <span class="attr">"qty"</span>: <span class="number">500</span>, <span class="attr">"type"</span>: <span class="string">"no.2"</span> &#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2、collection(集合)</p>
<p>集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"item"</span>: <span class="string">"pencil"</span>, <span class="attr">"qty"</span>: <span class="number">500</span>, <span class="attr">"type"</span>: <span class="string">"no.1"</span> &#125;</div><div class="line">&#123; <span class="attr">"item"</span>: <span class="string">"pencil2"</span>, <span class="attr">"qty"</span>: <span class="number">550</span>, <span class="attr">"type"</span>: <span class="string">"no.2"</span> &#125;</div><div class="line">&#123; <span class="attr">"item"</span>: <span class="string">"pencil3"</span>, <span class="attr">"qty"</span>: <span class="number">800</span>, <span class="attr">"type"</span>: <span class="string">"no.3"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>3、database(数据库)</p>
<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。</p>
<h3 id="二、数据库操作："><a href="#二、数据库操作：" class="headerlink" title="二、数据库操作："></a>二、数据库操作：</h3><p>连接及运行mongoDB<br>“<code>show dbs</code>“命令可以显示所有的数据的列表<br>“<code>db</code>“命令可以显示当前数据库对象或集合<br>“<code>use</code>“命令可以连接到一个指定的数据库<br>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。<br>  1.不能是空字符串（””)。<br>  2.不得含有’ ‘（空格)、.、$、/、\和\0 (空宇符)。<br>  3.应全部小写。<br>  4.最多64字节。</p>
<p>1、创建数据库：<code>use Database_Name</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use <span class="built_in">test</span>  <span class="comment">##创建名为test的数据库</span></div></pre></td></tr></table></figure></p>
<p>2、删除当前数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure></p>
<h3 id="三、文档操作（以-Collection-Name-col-为例）"><a href="#三、文档操作（以-Collection-Name-col-为例）" class="headerlink" title="三、文档操作（以 Collection_Name = col 为例）"></a>三、文档操作（以 Collection_Name = col 为例）</h3><h4 id="1、插入："><a href="#1、插入：" class="headerlink" title="1、插入："></a>1、插入：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.col.insert(Document)     <span class="comment">##插入一条或多组数据</span></div><div class="line">db.col.insertOne(Document)  <span class="comment">##插入一条数据</span></div><div class="line">db.col.insertMany(Document) <span class="comment">##插入多条数据</span></div><div class="line"><span class="comment">##例如：</span></div><div class="line">    db.col.insertOne(&#123; <span class="string">"item"</span>: <span class="string">"pencil"</span>, <span class="string">"type"</span>: <span class="string">"no.1"</span> &#125;)</div><div class="line">    db.col.insertMany([</div><div class="line">    &#123; <span class="string">"item"</span>: <span class="string">"dog"</span>, <span class="string">"type"</span>: <span class="string">"no.2"</span> &#125;,</div><div class="line">    &#123; <span class="string">"item"</span>: <span class="string">"apple"</span>, <span class="string">"type"</span>: <span class="string">"no.3"</span> &#125;,</div><div class="line">    &#123; <span class="string">"item"</span>: <span class="string">"orange"</span>, <span class="string">"type"</span>: <span class="string">"no.4"</span> &#125;</div><div class="line">    ])</div></pre></td></tr></table></figure>
<h4 id="2、删除："><a href="#2、删除：" class="headerlink" title="2、删除："></a>2、删除：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">db.col.remove(&#123;&#125;)                    <span class="comment">##删除所有数据</span></div><div class="line">db.col.remove(query &lt;,options&gt;)</div><div class="line">    <span class="comment">#  query: 查询条件(数据索引或名字)</span></div><div class="line">    <span class="comment">#  ptions:两个可选参数</span></div><div class="line">    <span class="comment">#      &#123;justOne: &lt;boolean&gt;,     //默认false，删除所有匹配到的。</span></div><div class="line">    <span class="comment">#       writeConcern: &lt;document&gt;//抛出异常的级别。</span></div><div class="line">    <span class="comment">#      &#125;</span></div><div class="line">db.col.deleteOne(query &lt;,options&gt;)   <span class="comment">##同上，无justOne参数，只删除第一条</span></div><div class="line">db.col.deleteMany(query &lt;,options&gt;)  <span class="comment">##同上，无justOne参数，只删除多条</span></div></pre></td></tr></table></figure>
<h3 id="3、更新："><a href="#3、更新：" class="headerlink" title="3、更新："></a>3、更新：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">db.col.update(query, update &lt;,options&gt;)</div><div class="line">    <span class="comment">#  query:  查询条件(数据索引或名字)</span></div><div class="line">    <span class="comment">#  update: 更新的内容，语法：&#123;$set:query&#125;</span></div><div class="line">    <span class="comment">#  options:三个可选参数</span></div><div class="line">    <span class="comment">#      &#123;upsert: &lt;boolean&gt;,      //如果不存在update的记录，是否插入新数据，默认:false。</span></div><div class="line">    <span class="comment">#       multi: &lt;boolean&gt;,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。</span></div><div class="line">    <span class="comment">#       writeConcern: &lt;document&gt;//#抛出异常的级别。</span></div><div class="line">    <span class="comment">#      &#125;</span></div><div class="line"><span class="comment">##例如：</span></div><div class="line">    db.col.update(</div><div class="line">        &#123;<span class="string">"type"</span>: <span class="string">"no.1"</span>&#125;, </div><div class="line">        &#123;<span class="variable">$set</span>: &#123;<span class="string">"item"</span>: <span class="string">"human"</span>&#125;&#125;, </div><div class="line">        &#123;upsert: <span class="literal">true</span>, multi: <span class="literal">true</span>&#125;</div><div class="line">        )</div><div class="line">db.col.updateOne()                    <span class="comment">##同上，无multi参数，只更新第一条</span></div><div class="line">db.col.updateMany()                   <span class="comment">##同上，无multi参数</span></div><div class="line">db.col.replaceOne()                   <span class="comment">##同updateOne</span></div><div class="line">db.col.save(document &lt;,writeConcern&gt;) <span class="comment">##通过传入的文档整个替换</span></div></pre></td></tr></table></figure>
<h5 id="insert-与-save的区别"><a href="#insert-与-save的区别" class="headerlink" title="insert 与 save的区别"></a>insert 与 save的区别</h5><p>如果插入的数据的_id相同,save将会更新该文档,而insert将会报错</p>
<h5 id="update常用操作符"><a href="#update常用操作符" class="headerlink" title="update常用操作符"></a>update常用操作符</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$set</span>         <span class="comment">##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.</span></div><div class="line"><span class="variable">$unset</span>       <span class="comment">##删除文档中的一个字段.</span></div><div class="line"><span class="variable">$rename</span>      <span class="comment">##重命名某个列</span></div><div class="line"><span class="variable">$inc</span>         <span class="comment">##增长某个列</span></div><div class="line"><span class="variable">$setOnInsert</span> <span class="comment">##当upsert为true时,并且发生了insert操作时,可以补充的字段</span></div><div class="line"><span class="variable">$push</span>        <span class="comment">##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.</span></div><div class="line"><span class="variable">$pushAll</span>     <span class="comment">##将多个数值一次存入数组.上面的push只能一个一个的存入</span></div><div class="line"><span class="variable">$addToSet</span>    <span class="comment">##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.</span></div><div class="line"><span class="variable">$pop</span>         <span class="comment">##删除数组最后一个元素</span></div><div class="line"><span class="variable">$pull</span>        <span class="comment">##删除数组中的指定的元素,如果删除的字段不是数组,会报错</span></div><div class="line"><span class="variable">$pullAll</span>     <span class="comment">##删除数组中的多个值,跟pushAll与push的关系类似.</span></div></pre></td></tr></table></figure>
<h3 id="4、查询"><a href="#4、查询" class="headerlink" title="4、查询"></a>4、查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.col.find(&#123;&#125;)          <span class="comment">##查询所有文档</span></div><div class="line">db.col.find().pretty()   <span class="comment">##以易读的方式来读取数据</span></div><div class="line">db.collection.find(query, projection)</div><div class="line">    <span class="comment">#  query：查询条件(数据索引或名字)</span></div><div class="line">    <span class="comment">#  projection：可选。指定返回的字段。</span></div></pre></td></tr></table></figure>
<h4 id="4-1、深入查询表达式"><a href="#4-1、深入查询表达式" class="headerlink" title="4.1、深入查询表达式"></a>4.1、深入查询表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">db.col.find()<span class="comment">##查询所有</span></div><div class="line">db.col.find(&#123;filed: value&#125;)                              <span class="comment">##等值查询</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$ne</span>: value&#125;&#125;)                       <span class="comment">##不等于 $ne</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$nin</span>: [value1, value2, ...]&#125;&#125;)      <span class="comment">##不能包含给定的值 $nin</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$all</span>: [value1, value2, ...]&#125;&#125;)      <span class="comment">##必须包含所有给定的值 $all</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$in</span>: [value1, value2, ...]&#125;&#125;)       <span class="comment">##只要包含一个或多个给定的值 $in</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$exists</span>:1&#125;&#125;)                        <span class="comment">##存在filed字段的</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$exists</span>:0&#125;&#125;)                        <span class="comment">##不存在filed字段的</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$mod</span>:[3,1]&#125;&#125;)                       <span class="comment">##模三余一，$mod(取模操作)</span></div><div class="line">db.col.find(&#123;<span class="variable">$or</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;) <span class="comment">##或 $or</span></div><div class="line">db.col.find(&#123;<span class="variable">$nor</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;)<span class="comment">##排除 $nor</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$size</span>: 3&#125;&#125;)                         <span class="comment">##返回值得数组是给定的长度(3) $size</span></div><div class="line">db.col.find(&#123;<span class="variable">$where</span>: <span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> ...&#125;&#125;)            <span class="comment">##回调，隐式迭代，符合条件才返回</span></div><div class="line">db.col.find(&#123;<span class="variable">$where</span>: <span class="string">'...'</span>&#125;&#125;)                            <span class="comment">##同上</span></div><div class="line">db.col.find(&#123;age: &#123;<span class="variable">$lt</span>: 5&#125;&#125;).<span class="built_in">limit</span>(3)                    <span class="comment">##查询age的值小于5，限制3条</span></div><div class="line">    <span class="comment">#范围查询：</span></div><div class="line">    <span class="comment">#    $lt  （小于）</span></div><div class="line">    <span class="comment">#    $gt  （大于）</span></div><div class="line">    <span class="comment">#    $lte （小于等于）</span></div><div class="line">    <span class="comment">#    $gte （大于等于）</span></div><div class="line">    <span class="comment">#    limit（限制显示）</span></div><div class="line">db.col.find().skip(2).<span class="built_in">limit</span>(3)                           <span class="comment">##跳过前两个文档查询后面三个</span></div><div class="line">    <span class="comment">#  skip(num):表示跳过前面num个文档</span></div><div class="line">db.col.find().sort(&#123;age: 1&#125;)                             <span class="comment">##查询后以age升序排列显示</span></div><div class="line">    <span class="comment">#  sort():排序，这里 1 代表升序, -1 代表降序.</span></div><div class="line">db.col.find(&#123;filed: /user.*/i&#125;)                          <span class="comment">##正则，查询filed以user开头不区分大小写（正则效率低）</span></div><div class="line">db.col.find(&#123;filed: &#123;<span class="variable">$type</span>: 1&#125;&#125;)                         <span class="comment">##查找filed为双精度的文档</span></div><div class="line">    <span class="comment"># 根据数据类型查询 $type</span></div><div class="line">    <span class="comment">#      |类型　　　　　　　　|编号|</span></div><div class="line">    <span class="comment">#      |双精度　　　　　　　|1 　|</span></div><div class="line">    <span class="comment">#      |字符串　　　　　　　|2 　|</span></div><div class="line">    <span class="comment">#      |对象　　　　　　　　|3   |</span></div><div class="line">    <span class="comment">#      |数组　　　　　　　　|4   |</span></div><div class="line">    <span class="comment">#      |二进制数据　　　　　|5   |</span></div><div class="line">    <span class="comment">#      |对象ID　　　　　　　|7   |</span></div><div class="line">    <span class="comment">#      |布尔值　　　　　　　|8   |</span></div><div class="line">    <span class="comment">#      |日期　　　　　　　　|9   |</span></div><div class="line">    <span class="comment">#      |空　　　　　　　　　|10  |</span></div><div class="line">    <span class="comment">#      |正则表达式　　　　　|11  |</span></div><div class="line">    <span class="comment">#      |JavaScript　　　　|13  |</span></div><div class="line">    <span class="comment">#      |符号　　　　　　　　|14  |</span></div><div class="line">    <span class="comment">#      |JavaScript(带范围)|15  |</span></div><div class="line">    <span class="comment">#      |32位整数　　　　　　|16  |</span></div><div class="line">    <span class="comment">#      |时间戳　　　　　　　|17  |</span></div><div class="line">    <span class="comment">#      |64位整数　　　　　　|18  |</span></div><div class="line">    <span class="comment">#      |最小键　　　　　　　|255 |</span></div><div class="line">    <span class="comment">#      |最大键　　　　　　　|127 |</span></div></pre></td></tr></table></figure>
<h4 id="4-2、group分组查询"><a href="#4-2、group分组查询" class="headerlink" title="4.2、group分组查询"></a>4.2、group分组查询</h4><p>group做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">group(&#123;</div><div class="line">  key:&#123;字段:1&#125;,</div><div class="line">  initial:&#123;变量:初始值&#125;,</div><div class="line">  <span class="variable">$reduce</span>:<span class="keyword">function</span>(doc,prev)&#123;函数代码&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>其中key下的字段代表,需要按哪个字段分组.<br>initial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.<br>$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.</p>
<p>栗子：如下我们按年龄分组,同级不同年龄的用户的多少:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">db.user.find()</div><div class="line">    &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b2"</span>), <span class="string">"name"</span> : <span class="string">"user0"</span>, <span class="string">"age"</span> : 0 &#125;</div><div class="line">    &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b3"</span>), <span class="string">"name"</span> : <span class="string">"user1"</span>, <span class="string">"age"</span> : 1 &#125;</div><div class="line">    &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b4"</span>), <span class="string">"name"</span> : <span class="string">"user2"</span>, <span class="string">"age"</span> : 2 &#125;</div><div class="line">    &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b5"</span>), <span class="string">"name"</span> : <span class="string">"user3"</span>, <span class="string">"age"</span> : 1 &#125;</div><div class="line">    &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b6"</span>), <span class="string">"name"</span> : <span class="string">"user4"</span>, <span class="string">"age"</span> : 1 &#125;</div><div class="line">    &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b7"</span>), <span class="string">"name"</span> : <span class="string">"user5"</span>, <span class="string">"age"</span> : 2 &#125;</div><div class="line"></div><div class="line">db.user.group(&#123;</div><div class="line">    key:&#123;age:1&#125;,</div><div class="line">    initial:&#123;count:0&#125;,</div><div class="line">    <span class="variable">$reduce</span>:<span class="keyword">function</span>(doc,prev)&#123;</div><div class="line">        prev.count++</div><div class="line">    &#125;</div><div class="line">&#125;); </div><div class="line">    [</div><div class="line">        &#123;<span class="string">"age"</span>: 0, <span class="string">"count"</span>: 1&#125;,</div><div class="line">        &#123;<span class="string">"age"</span>: 1, <span class="string">"count"</span>: 3&#125;,</div><div class="line">        &#123;<span class="string">"age"</span>: 2, <span class="string">"count"</span>: 2&#125;</div><div class="line">    ]</div><div class="line"></div><div class="line">db.user.group(&#123;</div><div class="line">    key:&#123;age:1&#125;,</div><div class="line">    initial:&#123;users:[]&#125;,</div><div class="line">    reduce:<span class="keyword">function</span>(doc,prev)&#123;</div><div class="line">        prev.users.push(doc.name)</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">  [</div><div class="line">      &#123;<span class="string">"age"</span>: 0, <span class="string">"users"</span>: [<span class="string">"user0"</span>]&#125;,</div><div class="line">      &#123;<span class="string">"age"</span>: 1, <span class="string">"users"</span>: [<span class="string">"user1"</span>, <span class="string">"user3"</span>, <span class="string">"user4"</span>]&#125;,</div><div class="line">      &#123;<span class="string">"age"</span>: 2, <span class="string">"users"</span>: [<span class="string">"user2"</span>, <span class="string">"user5"</span>]&#125;</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>另外本函数还有两个可选参数 condition 和 finalize<br>condition就是分组的条件筛选类似mysql中的having<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">db.user.group(&#123;</div><div class="line">    key:&#123;age:1&#125;,</div><div class="line">    initial:&#123;users:[]&#125;,</div><div class="line">    <span class="variable">$reduce</span>:<span class="keyword">function</span>(doc,prev)&#123;</div><div class="line">        prev.users.push(doc.name)</div><div class="line">    &#125;,</div><div class="line">    condition:&#123;age:&#123;<span class="variable">$gt</span>:0&#125;&#125;&#125;)</div><div class="line">　<span class="comment">##筛选出age大于0的:</span></div><div class="line">[</div><div class="line">    &#123;<span class="string">"age"</span>: 1, <span class="string">"users"</span>: [<span class="string">"user1"</span>, <span class="string">"user3"</span>, <span class="string">"user4"</span>]&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: 2, <span class="string">"users"</span>: [<span class="string">"user2"</span>, <span class="string">"user5"</span>]&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="4-3、count统计"><a href="#4-3、count统计" class="headerlink" title="4.3、count统计"></a>4.3、count统计</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.goods.count()            <span class="comment">##统计该集合总数</span></div><div class="line">db.goods.count(&#123;cat_id: 3&#125;) <span class="comment">##统计cat_id=3的总数</span></div></pre></td></tr></table></figure>
<h4 id="4-4、distinct排重"><a href="#4-4、distinct排重" class="headerlink" title="4.4、distinct排重"></a>4.4、distinct排重</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.user.find()</div><div class="line">   &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b2"</span>), <span class="string">"name"</span> : <span class="string">"user0"</span>, <span class="string">"age"</span> : 0 &#125;</div><div class="line">   &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b3"</span>), <span class="string">"name"</span> : <span class="string">"user1"</span>, <span class="string">"age"</span> : 1 &#125;</div><div class="line">   &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b4"</span>), <span class="string">"name"</span> : <span class="string">"user2"</span>, <span class="string">"age"</span> : 2 &#125;</div><div class="line">   &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b5"</span>), <span class="string">"name"</span> : <span class="string">"user3"</span>, <span class="string">"age"</span> : 1 &#125;</div><div class="line">   &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b6"</span>), <span class="string">"name"</span> : <span class="string">"user4"</span>, <span class="string">"age"</span> : 1 &#125;</div><div class="line">   &#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5198c286c686eb50e2c843b7"</span>), <span class="string">"name"</span> : <span class="string">"user5"</span>, <span class="string">"age"</span> : 2 &#125;</div><div class="line"></div><div class="line"> db.user.distinct(<span class="string">"age"</span>) <span class="comment">## 特殊,传入的参数直接是字符串,而不是对象;</span></div><div class="line">     [0, 1, 2]</div></pre></td></tr></table></figure>
<h4 id="4-5、子文档查询-elemMatch"><a href="#4-5、子文档查询-elemMatch" class="headerlink" title="4.5、子文档查询$elemMatch"></a>4.5、子文档查询$elemMatch</h4><p>elemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。<br>注意：<br>(1)数组中元素是内嵌文档。<br>(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。<br>假设集合school有如下数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> _id: 1,</div><div class="line"> zipcode: 63109,</div><div class="line"> students: [</div><div class="line">              &#123; name: <span class="string">"john"</span>, school: 102, age: 10 &#125;,</div><div class="line">              &#123; name: <span class="string">"jess"</span>, school: 102, age: 11 &#125;,</div><div class="line">              &#123; name: <span class="string">"jeff"</span>, school: 108, age: 15 &#125;</div><div class="line">           ]</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"> _id: 2,</div><div class="line"> zipcode: 63110,</div><div class="line"> students: [</div><div class="line">              &#123; name: <span class="string">"ajax"</span>, school: 100, age: 7 &#125;,</div><div class="line">              &#123; name: <span class="string">"achilles"</span>, school: 100, age: 8 &#125;,</div><div class="line">           ]</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"> _id: 3,</div><div class="line"> zipcode: 63109,</div><div class="line"> students: [</div><div class="line">              &#123; name: <span class="string">"ajax"</span>, school: 100, age: 7 &#125;,</div><div class="line">              &#123; name: <span class="string">"achilles"</span>, school: 100, age: 8 &#125;,</div><div class="line">           ]</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"> _id: 4,</div><div class="line"> zipcode: 63109,</div><div class="line"> students: [</div><div class="line">              &#123; name: <span class="string">"barney"</span>, school: 102, age: 7 &#125;,</div><div class="line">           ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.school.find(&#123;zipcode: 63109 &#125;,&#123; students: &#123; <span class="variable">$elemMatch</span>: &#123; school: 102 &#125; &#125; &#125; );</div><div class="line"></div><div class="line">&#123;<span class="string">"_id"</span>: 1, <span class="string">"students"</span>: [&#123;<span class="string">"name"</span>:<span class="string">"john"</span>, <span class="string">"school"</span>:102, <span class="string">"age"</span>:10&#125;]&#125;</div><div class="line">&#123;<span class="string">"_id"</span>: 3&#125;</div><div class="line">&#123;<span class="string">"_id"</span>: 4, <span class="string">"students"</span>: [&#123;<span class="string">"name"</span>:<span class="string">"barney"</span>, <span class="string">"school"</span>:102, <span class="string">"age"</span>:7&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>查询结果说明：<br><code>_id为1的文档</code>，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。<br><code>_id为3的文档</code>，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含”students”字段。</p>
<p>$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.school.find( &#123; zipcode: 63109 &#125;,&#123; students: &#123; <span class="variable">$elemMatch</span>: &#123; school: 102, age: &#123; <span class="variable">$gt</span>: 10&#125; &#125; &#125; &#125; );</div><div class="line"></div><div class="line">  &#123;<span class="string">"_id"</span>: 1, <span class="string">"students"</span>: [&#123;<span class="string">"name"</span>:<span class="string">"jess"</span>, <span class="string">"school"</span>:102, <span class="string">"age"</span>:11&#125;]&#125;</div><div class="line">  &#123;<span class="string">"_id"</span>: 3&#125;</div><div class="line">  &#123;<span class="string">"_id"</span>: 4&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;part2-CRUD操作-Creat-Read-Update-Delete&quot;&gt;&lt;a href=&quot;#part2-CRUD操作-Creat-Read-Update-Delete&quot; class=&quot;headerlink&quot; title=&quot;part2 CRUD操作(Creat,Read,Update,Delete)&quot;&gt;&lt;/a&gt;part2 CRUD操作(Creat,Read,Update,Delete)&lt;/h2&gt;&lt;h3 id=&quot;一、基础：&quot;&gt;&lt;a href=&quot;#一、基础：&quot; class=&quot;headerlink&quot; title=&quot;一、基础：&quot;&gt;&lt;/a&gt;一、基础：&lt;/h3&gt;&lt;p&gt;1、document(文档)&lt;/p&gt;
&lt;p&gt;MongoDB把所有数据存放在类似于JSON数据结构的文档内：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;item&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;pencil&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;&quot;qty&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;no.2&quot;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wpneu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="https://wpneu.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="https://wpneu.github.io/2016/07/29/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1).html"/>
    <id>https://wpneu.github.io/2016/07/29/MongoDB学习笔记(1).html</id>
    <published>2016-07-29T02:22:14.000Z</published>
    <updated>2017-07-30T07:21:47.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="part1-安装配置"><a href="#part1-安装配置" class="headerlink" title="part1 安装配置"></a>part1 安装配置</h2><h3 id="一、安装："><a href="#一、安装：" class="headerlink" title="一、安装："></a>一、安装：</h3><p>在mongodb官网下载对应自己电脑系统的安装包，地址为： <a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a>。<br><a id="more"></a><br>1、以Windows64bit为例，下载.msi文件双击安装。<br>2、安装过程中，点击 “Custom(自定义)” 按钮来设置安装目录(D:\MongoDB\bin)。<br>3、创建数据目录(D:\MongoDB\data\db),MongoDB默认数据目录\data\db。<br>4、连接数据库(命令行win+r cmd,到D:\MongoDB\bin目录下，执行代码：mongod –dbpath D:\MongoDB\data\db)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:</div><div class="line"><span class="built_in">cd</span> D:\MongoDB\bin</div><div class="line">mongod --dbpath D:\MongoDB\data\db</div></pre></td></tr></table></figure></p>
<p>5、启动 MongoDB JavaScript 工具(D:\MongoDB\bin目录下,打开mongo,会看到：)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MongoDB shell version: 3.2.4  //mongodb版本</div><div class="line">connecting to: <span class="built_in">test</span>  //默认shell连接的是本机localhost 上面的<span class="built_in">test</span>库</div></pre></td></tr></table></figure></p>
<p>此时就可以操作数据库了。</p>
<h3 id="二、将MongoDB服务器作为Windows服务运行"><a href="#二、将MongoDB服务器作为Windows服务运行" class="headerlink" title="二、将MongoDB服务器作为Windows服务运行"></a>二、将MongoDB服务器作为Windows服务运行</h3><p>1、在D:\MongoDB目录下创建mongodb.config,写入如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 数据库文件目录</span></div><div class="line">dbpath=D:/MongoDB/data</div><div class="line"><span class="comment">## 日志目录</span></div><div class="line">logpath=D:/MongoDB/<span class="built_in">log</span>/mongo.log</div><div class="line">diaglog=3</div></pre></td></tr></table></figure></p>
<p>2、常规命令(cmd管理员):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:</div><div class="line">cd D:\MongoDB\bin</div><div class="line">mongod --config D:\MongoDB\mongodb.config</div></pre></td></tr></table></figure></p>
<p>3、若常规方式失败，则sc方式(cmd管理员)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:</div><div class="line">cd D:\MongoDB\bin</div><div class="line">sc create mongodb binPath= &quot;D:\MongoDB\bin\mongod.exe --service --config=D:\mongoDB\mongodb.config&quot;</div></pre></td></tr></table></figure></p>
<p>访问地址：localhost:27017测试是否启动成功</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;part1-安装配置&quot;&gt;&lt;a href=&quot;#part1-安装配置&quot; class=&quot;headerlink&quot; title=&quot;part1 安装配置&quot;&gt;&lt;/a&gt;part1 安装配置&lt;/h2&gt;&lt;h3 id=&quot;一、安装：&quot;&gt;&lt;a href=&quot;#一、安装：&quot; class=&quot;headerlink&quot; title=&quot;一、安装：&quot;&gt;&lt;/a&gt;一、安装：&lt;/h3&gt;&lt;p&gt;在mongodb官网下载对应自己电脑系统的安装包，地址为： &lt;a href=&quot;http://www.mongodb.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mongodb.org/downloads&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wpneu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="https://wpneu.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 多进程(17)</title>
    <link href="https://wpneu.github.io/2016/06/30/Node.js%20%E5%A4%9A%E8%BF%9B%E7%A8%8B.html"/>
    <id>https://wpneu.github.io/2016/06/30/Node.js 多进程.html</id>
    <published>2016-06-30T07:42:28.000Z</published>
    <updated>2017-07-30T07:21:47.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="17、Node-js-多进程"><a href="#17、Node-js-多进程" class="headerlink" title="17、Node.js 多进程"></a>17、Node.js 多进程</h3><p>我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。<br>Node 提供了 child_process 模块来创建子进程，方法有：<br><a id="more"></a><br>    <code>exec - child_process.exec</code>//使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。<br>    <code>spawn - child_process.spawn</code>//使用指定的命令行参数创建新线程。<br>    <code>fork - child_process.fork</code>//是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’]) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</p>
<h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><p>child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。语法如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">child_process.exec(command[, options], callback)</div></pre></td></tr></table></figure></p>
<p>参数说明如下：<br>  <code>command</code>//字符串， 将要运行的命令，参数使用空格隔开<br>  <code>options</code>//对象，可以是：<br>    /<em>cwd ，字符串，子进程的当前工作目录<br>      env，对象 环境变量键值对<br>      encoding ，字符串，字符编码（默认： ‘utf8’）<br>      shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）<br>      timeout，数字，超时时间（默认： 0）<br>      maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200</em>1024）<br>      killSignal ，字符串，结束信号（默认：’SIGTERM’）<br>      uid，数字，设置用户进程的 ID<br>      gid，数字，设置进程组的 ID*/<br>  callback//回调函数，包含三个参数error, stdout 和 stderr。</p>
<p>exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//support.js 文件代码：</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"进程 "</span> + process.argv[<span class="number">2</span>] + <span class="string">" 执行。"</span> );</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//master.js 文件代码：</span></div><div class="line">  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">  <span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    <span class="keyword">var</span> workerProcess = child_process.exec(<span class="string">'node support.js'</span> + i, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.log(error.stack);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Error code: '</span> + error.code);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Signal received: '</span> + error.signal);</div><div class="line">      &#125; </div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'stdout: '</span> + stdout);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'stderr: '</span> + stderr);</div><div class="line">    &#125;);</div><div class="line">    workerProcess.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'子进程已退出，退出码 '</span> + code);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>//执行以上代码，结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">node master.js </div><div class="line">子进程已退出，退出码 0</div><div class="line">stdout: 进程 1 执行。</div><div class="line"></div><div class="line">stderr: </div><div class="line">子进程已退出，退出码 0</div><div class="line">stdout: 进程 0 执行。</div><div class="line"></div><div class="line">stderr: </div><div class="line">子进程已退出，退出码 0</div><div class="line">stdout: 进程 2 执行。</div><div class="line"></div><div class="line">stderr:</div></pre></td></tr></table></figure></p>
<h4 id="spawn-方法"><a href="#spawn-方法" class="headerlink" title="spawn() 方法"></a>spawn() 方法</h4><p>child_process.spawn 使用指定的命令行参数创建新线程，语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">child_process.spawn(command[, args][, options])</div></pre></td></tr></table></figure></p>
<p>参数说明如下：<br>  <code>command</code> //将要运行的命令<br>  <code>args</code> // Array 字符串参数数组<br>  <code>options</code> //Object<br>    /<em>cwd String 子进程的当前工作目录<br>      env Object 环境变量键值对<br>      stdio Array|String 子进程的 stdio 配置<br>      detached Boolean 这个子进程将会变成进程组的领导<br>      uid Number 设置用户进程的 ID<br>      gid Number 设置进程组的 ID</em>/<br>spawn() 方法返回流 (stdout &amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。</p>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//support.js 文件代码：</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"进程 "</span> + process.argv[<span class="number">2</span>] + <span class="string">" 执行。"</span> );</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//master.js 文件代码：</span></div><div class="line">  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">  <span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    <span class="keyword">var</span> workerProcess = child_process.spawn(<span class="string">'node'</span>, [<span class="string">'support.js'</span>, i]);</div><div class="line">    workerProcess.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'stdout: '</span> + data);</div><div class="line">    &#125;);</div><div class="line">    workerProcess.stderr.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'stderr: '</span> + data);</div><div class="line">    &#125;); </div><div class="line">    workerProcess.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'子进程已退出，退出码'</span> + code);</div><div class="line">    &#125;);         </div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>//执行以上代码，输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">node master.js stdout: 进程 0 执行。</div><div class="line"></div><div class="line">子进程已退出，退出码 0</div><div class="line">stdout: 进程 1 执行。</div><div class="line"></div><div class="line">子进程已退出，退出码 0</div><div class="line">stdout: 进程 2 执行。</div><div class="line"></div><div class="line">子进程已退出，退出码 0</div></pre></td></tr></table></figure></p>
<h4 id="fork-方法"><a href="#fork-方法" class="headerlink" title="fork 方法"></a>fork 方法</h4><p>child_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">child_process.fork(modulePath[, args][, options])</div></pre></td></tr></table></figure></p>
<p>参数说明如下：<br>  <code>modulePath</code>//String，将要在子进程中运行的模块<br>  <code>args</code>// Array 字符串参数数组<br>  <code>options</code>//Object<br>    /<em>cwd String 子进程的当前工作目录<br>      env Object 环境变量键值对<br>      execPath String 创建子进程的可执行文件<br>      execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）<br>      silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）<br>      uid Number 设置用户进程的 ID<br>      gid Number 设置进程组的 ID</em>/<br>返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。</p>
<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//support.js文件，代码如下：</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"进程"</span> + process.argv[<span class="number">2</span>] + <span class="string">"执行。"</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//master.js文件，代码如下：</span></div><div class="line">  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">  <span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    <span class="keyword">var</span> worker_process = child_process.fork(<span class="string">"support.js"</span>, [i]);</div><div class="line">    worker_process.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'子进程已退出，退出码'</span> + code);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>//执行以上代码，输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">node master.js </div><div class="line">进程 0 执行。</div><div class="line">子进程已退出，退出码 0</div><div class="line">进程 1 执行。</div><div class="line">子进程已退出，退出码 0</div><div class="line">进程 2 执行。</div><div class="line">子进程已退出，退出码 0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;17、Node-js-多进程&quot;&gt;&lt;a href=&quot;#17、Node-js-多进程&quot; class=&quot;headerlink&quot; title=&quot;17、Node.js 多进程&quot;&gt;&lt;/a&gt;17、Node.js 多进程&lt;/h3&gt;&lt;p&gt;我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。&lt;br&gt;Node 提供了 child_process 模块来创建子进程，方法有：&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js RESTful API(16)</title>
    <link href="https://wpneu.github.io/2016/06/30/Node.js%20RESTful%20API.html"/>
    <id>https://wpneu.github.io/2016/06/30/Node.js RESTful API.html</id>
    <published>2016-06-30T03:38:20.000Z</published>
    <updated>2017-07-30T07:21:47.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="16、Node-js-RESTful-API"><a href="#16、Node-js-RESTful-API" class="headerlink" title="16、Node.js RESTful API */"></a>16、Node.js RESTful API */</h3><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。<br><a id="more"></a></p>
<h4 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h4><p>以下为 REST 基本架构的四个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET - 用于获取数据。</div><div class="line">PUT - 用于添加数据。</div><div class="line">DELETE - 用于删除数据。</div><div class="line">POST - 用于更新或添加数据。</div></pre></td></tr></table></figure></p>
<h4 id="创建-RESTful"><a href="#创建-RESTful" class="headerlink" title="创建 RESTful"></a>创建 RESTful</h4><p>首先，创建一个 json 数据资源文件 users.json，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"user1"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</div><div class="line">    <span class="attr">"password"</span> : <span class="string">"password1"</span>,</div><div class="line">    <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"user2"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</div><div class="line">    <span class="attr">"password"</span> : <span class="string">"password2"</span>,</div><div class="line">    <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">2</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"user3"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</div><div class="line">    <span class="attr">"password"</span> : <span class="string">"password3"</span>,</div><div class="line">    <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">3</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>基于以上数据，我们创建以下 RESTful API：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">序号  URI       HTTP方法  发送内容   结果</div><div class="line">  1   listUsers   GET     空          显示所有用户列表</div><div class="line">  2   addUser   POST      JSON 字符串   添加新用户</div><div class="line">  3   deleteUser  DELETE    JSON 字符串   删除用户</div><div class="line">  4   :id       GET     空          显示用户详细信息</div></pre></td></tr></table></figure></p>
<h4 id="获取用户列表：listUsers"><a href="#获取用户列表：listUsers" class="headerlink" title="获取用户列表：listUsers"></a>获取用户列表：listUsers</h4><p>创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">app.get(<span class="string">'./listUsers'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    res.end(data);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://127.0.0.1:8081/listUsers，结果如下所示：" target="_blank" rel="external">http://127.0.0.1:8081/listUsers，结果如下所示：</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"user1"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</div><div class="line">      <span class="attr">"password"</span> : <span class="string">"password1"</span>,</div><div class="line">      <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"user2"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</div><div class="line">      <span class="attr">"password"</span> : <span class="string">"password2"</span>,</div><div class="line">      <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">2</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"user3"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</div><div class="line">      <span class="attr">"password"</span> : <span class="string">"password3"</span>,</div><div class="line">      <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">3</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="添加用户：addUser"><a href="#添加用户：addUser" class="headerlink" title="添加用户：addUser"></a>添加用户：addUser</h4><p>创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="comment">//添加的新用户数据</span></div><div class="line"><span class="keyword">var</span> user = &#123;</div><div class="line">  <span class="string">"user4"</span> : &#123;</div><div class="line">      <span class="string">"name"</span> : <span class="string">"mohit"</span>,</div><div class="line">      <span class="string">"password"</span> : <span class="string">"password4"</span>,</div><div class="line">      <span class="string">"profession"</span> : <span class="string">"teacher"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="number">4</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">app.get(<span class="string">'./addUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="comment">//读取已存在的数据</span></div><div class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</div><div class="line">    data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">    data[<span class="string">"user4"</span>] = user[<span class="string">"user4"</span>];</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://127.0.0.1:8081/addUser，结果如下所示：" target="_blank" rel="external">http://127.0.0.1:8081/addUser，结果如下所示：</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123; user1:</div><div class="line">   &#123; name: 'mahesh',</div><div class="line">     password: 'password1',</div><div class="line">     profession: 'teacher',</div><div class="line">     id: 1 &#125;,</div><div class="line">  user2:</div><div class="line">   &#123; name: 'suresh',</div><div class="line">     password: 'password2',</div><div class="line">     profession: 'librarian',</div><div class="line">     id: 2 &#125;,</div><div class="line">  user3:</div><div class="line">   &#123; name: 'ramesh',</div><div class="line">     password: 'password3',</div><div class="line">     profession: 'clerk',</div><div class="line">     id: 3 &#125;,</div><div class="line">  user4:</div><div class="line">   &#123; name: 'mohit',</div><div class="line">     password: 'password4',</div><div class="line">     profession: 'teacher',</div><div class="line">     id: 4 &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="删除用户：deleteUser"><a href="#删除用户：deleteUser" class="headerlink" title="删除用户：deleteUser"></a>删除用户：deleteUser</h4><p>创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">app.get(<span class="string">'./deleteUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="comment">//读取已存在的数据</span></div><div class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</div><div class="line">    data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">    <span class="keyword">delete</span> data[<span class="string">"user"</span>+<span class="number">2</span>];</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://127.0.0.1:8081/deleteUser，结果如下所示：" target="_blank" rel="external">http://127.0.0.1:8081/deleteUser，结果如下所示：</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123; user1:</div><div class="line">   &#123; name: 'mahesh',</div><div class="line">     password: 'password1',</div><div class="line">     profession: 'teacher',</div><div class="line">     id: 1 &#125;,</div><div class="line">  user3:</div><div class="line">   &#123; name: 'ramesh',</div><div class="line">     password: 'password3',</div><div class="line">     profession: 'clerk',</div><div class="line">     id: 3 &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="显示用户详情：-id-用户id"><a href="#显示用户详情：-id-用户id" class="headerlink" title="显示用户详情：:id(用户id)"></a>显示用户详情：:id(用户id)</h4><p>创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">app.get(<span class="string">'./:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="comment">//读取已存在的数据</span></div><div class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</div><div class="line">    data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">    <span class="keyword">var</span> user = data[<span class="string">"user"</span> + req.params.id]</div><div class="line">    <span class="built_in">console</span>.log(user);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(user));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://127.0.0.1:8081/2，结果如下所示：" target="_blank" rel="external">http://127.0.0.1:8081/2，结果如下所示：</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"name"</span>:<span class="string">"suresh"</span>,</div><div class="line">   <span class="attr">"password"</span>:<span class="string">"password2"</span>,</div><div class="line">   <span class="attr">"profession"</span>:<span class="string">"librarian"</span>,</div><div class="line">   <span class="attr">"id"</span>:<span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;16、Node-js-RESTful-API&quot;&gt;&lt;a href=&quot;#16、Node-js-RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;16、Node.js RESTful API */&quot;&gt;&lt;/a&gt;16、Node.js RESTful API */&lt;/h3&gt;&lt;p&gt;REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Express 框架(15)</title>
    <link href="https://wpneu.github.io/2016/06/30/Node.js%20Express%20%E6%A1%86%E6%9E%B6.html"/>
    <id>https://wpneu.github.io/2016/06/30/Node.js Express 框架.html</id>
    <published>2016-06-30T01:38:20.000Z</published>
    <updated>2017-07-30T07:21:47.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="15、Node-js-Express-框架"><a href="#15、Node-js-Express-框架" class="headerlink" title="15、Node.js Express 框架"></a>15、Node.js Express 框架</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：<br>1、可以设置中间件来响应 HTTP 请求。<br>2、定义了路由表用于执行不同的 HTTP 请求动作。<br>3、可以通过向模板传递参数来动态渲染 HTML 页面。<br><a id="more"></a></p>
<h4 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h4><p>安装 Express 并将其保存到依赖列表中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express --save</div></pre></td></tr></table></figure></p>
<p>以上命令会将 Express 框架安装在当期目录的 <code>node_modules</code> 目录中， <code>node_modules</code> 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</div><div class="line">//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</div><div class="line">//multer - node.js 中间件，用于处理 enctype=&quot;multipart/form-data&quot;（设置表单的MIME编码）的表单数据。</div><div class="line">  npm install body-parser --save</div><div class="line">  npm install cookie-parser --save</div><div class="line">  npm install multer --save</div></pre></td></tr></table></figure></p>
<h4 id="第一个-Express-框架实例"><a href="#第一个-Express-框架实例" class="headerlink" title="第一个 Express 框架实例"></a>第一个 Express 框架实例</h4><p>接下来我们使用 Express 框架来输出 “Hello World”。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br>创建 express_demo.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node express_demo.js</div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://127.0.0.1:8081，结果如下所示：" target="_blank" rel="external">http://127.0.0.1:8081，结果如下所示：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World</div></pre></td></tr></table></figure></p>
<h4 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h4><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</p>
<h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br><code>req.app</code>：当callback为外部文件时，用req.app访问express的实例<br><code>req.baseUrl</code>：获取路由当前安装的URL路径<br><code>req.body / req.cookies</code>：获得「请求主体」/ Cookies<br><code>req.fresh / req.stale</code>：判断请求是否还「新鲜」<br><code>req.hostname / req.ip</code>：获取主机名和IP地址<br><code>req.originalUrl</code>：获取原始请求URL<br><code>req.params</code>：获取路由的parameters<br><code>req.path</code>：获取请求路径<br><code>req.protocol</code>：获取协议类型<br><code>req.query</code>：获取URL的查询参数串<br><code>req.route</code>：获取当前匹配的路由<br><code>req.subdomains</code>：获取子域名<br><code>req.accpets（）</code>：检查请求的Accept头的请求类型<br><code>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</code><br><code>req.get（）</code>：获取指定的HTTP请求头<br><code>req.is（）</code>：判断请求头Content-Type的MIME类型</p>
<h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br><code>res.app</code>：同req.app一样<br><code>res.append（）</code>：追加指定HTTP头<br><code>res.set（）</code>在res.append（）后将重置之前设置的头<br><code>res.cookie（name，value [，option]）</code>：设置Cookie<br><code>opition</code>: domain / expires / httpOnly / maxAge / path / secure / signed<br><code>res.clearCookie（）</code>：清除Cookie<br><code>res.download（）</code>：传送指定路径的文件<br><code>res.get（）</code>：返回指定的HTTP头<br><code>res.json（）</code>：传送JSON响应<br><code>res.jsonp（）</code>：传送JSONP响应<br><code>res.location（）</code>：只设置响应的Location HTTP头，不设置状态码或者close response<br><code>res.redirect（）</code>：设置响应的Location HTTP头，并且设置状态码302<br><code>res.send（）</code>：传送HTTP响应<br><code>res.sendFile（path [，options] [，fn]）</code>：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br><code>res.set（）</code>：设置HTTP头，传入object可以一次设置多个头<br><code>res.status（）</code>：设置HTTP状态码<br><code>res.type（）</code>：设置Content-Type的MIME类型</p>
<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。<br>创建 express_demo2.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="comment">//主页输出"Hello World"</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"主页GET请求"</span>);</div><div class="line">  res.send(<span class="string">'Hello GET'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//POST请求</span></div><div class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"主页 POST 请求"</span>);</div><div class="line">  res.send(<span class="string">'Hello POST'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// /del_user页面响应</span></div><div class="line">app.delete(<span class="string">'/del_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"/del_user响应 DELETE 请求"</span>);</div><div class="line">  res.send(<span class="string">'删除页面'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// /list_user 页面 GET 请求</span></div><div class="line">app.get(<span class="string">'/list_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"/list_user 页面 GET 请求"</span>);</div><div class="line">  res.send(<span class="string">'用户列表页面'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 对页面 abcd, abxcd, ab123cd, 等响应GET请求</span></div><div class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"/ab*cd GET 请求"</span>);</div><div class="line">  res.send(<span class="string">'正则匹配'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  node express_demo2.js</div><div class="line">  应用实例，访问地址为 http://0.0.0.0:8081</div><div class="line">```        </div><div class="line">接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。</div><div class="line">  访问 http://127.0.0.1:8081/list_user 结果：用户列表页</div><div class="line">  访问 http://127.0.0.1:8081/abcd 结果：正则匹配</div><div class="line">  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址</div><div class="line">#### 静态文件</div><div class="line">Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</div><div class="line">``` javascript</div><div class="line">        app.use(express.static(&apos;public&apos;));//public为放置静态文件的目录</div></pre></td></tr></table></figure></p>
<p>我们可以到 public/images 目录下放些图片,如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">node_modules</div><div class="line">server.js</div><div class="line">public/</div><div class="line">public/images</div><div class="line">public/images/logo.png</div></pre></td></tr></table></figure></p>
<p>让我们再修改下 “Hello Word” 应用添加处理静态文件的功能。<br>创建 express_demo3.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node express_demo3.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://127.0.0.1:8081/images/logo.png" target="_blank" rel="external">http://127.0.0.1:8081/images/logo.png</a> ,结果展示了图片。</p>
<h4 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h4><p>以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8081/process_get"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></div><div class="line">      First Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"first_name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"last_name"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>server.js文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</div><div class="line">&#125;);</div><div class="line">app.get(<span class="string">'/process_get'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="comment">//输出JSON格式</span></div><div class="line">  response = &#123;</div><div class="line">    first_name:req.query.first_name,</div><div class="line">    last_name:req.query.last_name</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">  res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);         </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：" target="_blank" rel="external">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p>
<h4 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h4><p>以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码修改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8081/process_post"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">      First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"first_name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"last_name"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>server.js 文件代码修改如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="comment">//创建application/x-www-form-urlencode编码解析</span></div><div class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;);</div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/process_post'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="comment">//输出 JSON 格式</span></div><div class="line">  response = &#123;</div><div class="line">    first_name:req.body.first_name,</div><div class="line">    last_name:req.body.last_name</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">  res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);         </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：" target="_blank" rel="external">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。<br>index.htm 文件代码修改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    选择一个文件上传: <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/file_upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">size</span>=<span class="string">"50"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>server.js 文件代码修改如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</div><div class="line">app.use(multer(&#123;<span class="attr">dest</span>:<span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);<span class="comment">//上传文件信息</span></div><div class="line">  <span class="keyword">var</span> des_file = __dirname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</div><div class="line">  fs.readFile(req. files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">    fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">      &#125; <span class="keyword">else</span>&#123;</div><div class="line">        response = &#123;</div><div class="line">          message:<span class="string">'File uploaded successfully'</span>,</div><div class="line">          filename:req.files[<span class="number">0</span>].originalname</div><div class="line">        &#125;;</div><div class="line">      &#125;;</div><div class="line">      <span class="built_in">console</span>.log(response);</div><div class="line">      res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>
<p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：" target="_blank" rel="external">http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：</a><br>  <code>{&quot;message&quot;:&quot;File uploaded successfully&quot;,&quot;filename&quot;:&quot;a.jpg&quot;}</code></p>
<h4 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h4><p>我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：<br>express_cookie.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(cookieParser());</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Cookies: "</span>, req.cookies);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">8081</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;15、Node-js-Express-框架&quot;&gt;&lt;a href=&quot;#15、Node-js-Express-框架&quot; class=&quot;headerlink&quot; title=&quot;15、Node.js Express 框架&quot;&gt;&lt;/a&gt;15、Node.js Express 框架&lt;/h3&gt;&lt;p&gt;Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。&lt;br&gt;Express 框架核心特性：&lt;br&gt;1、可以设置中间件来响应 HTTP 请求。&lt;br&gt;2、定义了路由表用于执行不同的 HTTP 请求动作。&lt;br&gt;3、可以通过向模板传递参数来动态渲染 HTML 页面。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Web 模块(14)</title>
    <link href="https://wpneu.github.io/2016/06/29/Node.js%20Web%E6%A8%A1%E5%9D%97.html"/>
    <id>https://wpneu.github.io/2016/06/29/Node.js Web模块.html</id>
    <published>2016-06-29T12:51:36.000Z</published>
    <updated>2017-07-30T07:21:47.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id="14、Node-js-Web-模块"><a href="#14、Node-js-Web-模块" class="headerlink" title="14、Node.js Web 模块"></a>14、Node.js Web 模块</h3><p>使用 Node 创建 Web 服务器<br>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure></p>
<p>以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="comment">//创建服务器</span></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">  <span class="comment">//解析请求，包括文件名</span></div><div class="line">  <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">  <span class="comment">//输出请求文件名</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">  <span class="comment">//从文件系统中读取请求的文件内容</span></div><div class="line">  fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err);</div><div class="line">      <span class="comment">//HTTP 状态码：404：NOT FOUND</span></div><div class="line">      <span class="comment">//Content Type：text/plain</span></div><div class="line">      response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">      <span class="comment">//HTTP 状态码：200：OK</span></div><div class="line">      <span class="comment">//Content Type：text/plain</span></div><div class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">      <span class="comment">//响应文件内容</span></div><div class="line">      response.write(data.toString());</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//发送响应数据</span></div><div class="line">    response.end();</div><div class="line">  &#125;);</div><div class="line">&#125;).listen(<span class="number">8081</span>);</div></pre></td></tr></table></figure></p>
<p>控制台会输出以下信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure></p>
<p>接下来我们在该目录下创建一个 index.htm 文件，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    Hello World!</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>执行 server.js 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js</div><div class="line">Server running at http://127.0.0.1:8081/</div></pre></td></tr></table></figure></p>
<h4 id="使用-Node-创建-Web-客户端"><a href="#使用-Node-创建-Web-客户端" class="headerlink" title="使用 Node 创建 Web 客户端"></a>使用 Node 创建 Web 客户端</h4><p>Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="comment">//用于请求选项</span></div><div class="line"><span class="keyword">var</span> optionss = &#123;</div><div class="line">  host:<span class="string">'localhost'</span>,</div><div class="line">  port:<span class="string">'8081'</span></div><div class="line">  path:<span class="string">'/index.htm'</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//处理响应的回调函数</span></div><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="comment">//不断更新数据</span></div><div class="line">  <span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line">  response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    body += data;</div><div class="line">  &#125;);</div><div class="line">  response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//数据接收完成</span></div><div class="line">    <span class="built_in">console</span>.log(body);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//向服务器端发送请求</span></div><div class="line"><span class="keyword">var</span> req = http.request(options, callback);</div><div class="line">req.end();</div></pre></td></tr></table></figure></p>
<p>新开一个终端，执行 client.js 文件，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node client.js</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    Hello World!</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行 server.js 的控制台输出信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Server running at http://127.0.0.1:8081/</div><div class="line">Request for /index.htm received.   # 客户端请求信息</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;14、Node-js-Web-模块&quot;&gt;&lt;a href=&quot;#14、Node-js-Web-模块&quot; class=&quot;headerlink&quot; title=&quot;14、Node.js Web 模块&quot;&gt;&lt;/a&gt;14、Node.js Web 模块&lt;/h3&gt;&lt;p&gt;使用 Node 创建 Web 服务器&lt;br&gt;Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js JXcore 打包(18)</title>
    <link href="https://wpneu.github.io/2016/06/29/Node.js%20JXcore%E6%89%93%E5%8C%85.html"/>
    <id>https://wpneu.github.io/2016/06/29/Node.js JXcore打包.html</id>
    <published>2016-06-29T12:14:59.000Z</published>
    <updated>2017-07-30T07:21:47.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="18、Node-js-JXcore-打包"><a href="#18、Node-js-JXcore-打包" class="headerlink" title="18、Node.js JXcore 打包"></a>18、Node.js JXcore 打包</h3><p>JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。</p>
<h4 id="JXcore-安装"><a href="#JXcore-安装" class="headerlink" title="JXcore 安装"></a>JXcore 安装</h4><p>下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。<br><a id="more"></a><br>步骤1、下载<br>    1、下载 JXcore 安装包 <code>http://jxcore.com/downloads/</code>，你需要根据你自己的系统环境来下载安装包。<br>    2、Linux/OSX 下载安装命令，直接下载解压包下的 jx 二进制文件拷贝到 /usr/bin 目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://s3.amazonaws.com/nodejx/jx_rh64.zip</div><div class="line">unzip jx_rh64.zip</div><div class="line">cp jx_rh64/jx /usr/bin</div></pre></td></tr></table></figure></p>
<p>将 /usr/bin 添加到 PATH 路径中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/bin</div></pre></td></tr></table></figure></p>
<p>以上步骤如果操作正确，使用以下命令，会输出版本号信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jx --version</div><div class="line">v0.10.32</div></pre></td></tr></table></figure></p>
<h4 id="包代码"><a href="#包代码" class="headerlink" title="包代码"></a>包代码</h4><p>例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">drwxr-xr-x  2 root root  4096 Nov 13 12:42 images</div><div class="line">-rwxr-xr-x  1 root root 30457 Mar  6 12:19 index.htm</div><div class="line">-rwxr-xr-x  1 root root 30452 Mar  1 12:54 index.js</div><div class="line">drwxr-xr-x 23 root root  4096 Jan 15 03:48 node_modules</div><div class="line">drwxr-xr-x  2 root root  4096 Mar 21 06:10 scripts</div><div class="line">drwxr-xr-x  2 root root  4096 Feb 15 11:56 style</div></pre></td></tr></table></figure></p>
<p>接下来我们使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jx package index.js index</div></pre></td></tr></table></figure></p>
<p>以上命令执行成功，会生成以下两个文件：<br>  index.jxp //这是一个中间件文件，包含了需要编译的完整项目信息。<br>  index.jx  //这是一个完整包信息的二进制文件，可运行在客户端上。</p>
<h4 id="载入-JX-文件"><a href="#载入-JX-文件" class="headerlink" title="载入 JX 文件"></a>载入 JX 文件</h4><p>我们使用 jx 命令打包项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node index.js command_line_arguments</div></pre></td></tr></table></figure></p>
<p>使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jx index.jx command_line_arguments</div></pre></td></tr></table></figure></p>
<p>更多 JXcore 功能特性你可以参考官网：<a href="http://jxcore.com/" target="_blank" rel="external">http://jxcore.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;18、Node-js-JXcore-打包&quot;&gt;&lt;a href=&quot;#18、Node-js-JXcore-打包&quot; class=&quot;headerlink&quot; title=&quot;18、Node.js JXcore 打包&quot;&gt;&lt;/a&gt;18、Node.js JXcore 打包&lt;/h3&gt;&lt;p&gt;JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。&lt;/p&gt;
&lt;h4 id=&quot;JXcore-安装&quot;&gt;&lt;a href=&quot;#JXcore-安装&quot; class=&quot;headerlink&quot; title=&quot;JXcore 安装&quot;&gt;&lt;/a&gt;JXcore 安装&lt;/h4&gt;&lt;p&gt;下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 工具模块(13)</title>
    <link href="https://wpneu.github.io/2016/06/29/Node.js%20%E5%B7%A5%E5%85%B7%E6%A8%A1%E5%9D%97.html"/>
    <id>https://wpneu.github.io/2016/06/29/Node.js 工具模块.html</id>
    <published>2016-06-29T10:38:26.000Z</published>
    <updated>2017-07-30T07:21:47.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="13、Node-js-工具模块"><a href="#13、Node-js-工具模块" class="headerlink" title="13、Node.js 工具模块"></a>13、Node.js 工具模块</h3><h4 id="Node-js-OS-模块"><a href="#Node-js-OS-模块" class="headerlink" title="Node.js OS 模块"></a>Node.js OS 模块</h4><p>Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</div></pre></td></tr></table></figure></p>
<h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>os.tmpdir()</code>//返回操作系统的默认临时文件夹。<br><a id="more"></a><br>2  <code>os.endianness()</code>//返回 CPU 的字节序，可能的是 “BE” 或 “LE”。<br>3  <code>os.hostname()</code>//返回操作系统的主机名。<br>4  <code>os.type()</code>//返回操作系统名<br>5  <code>os.platform()</code>//返回操作系统名<br>6  <code>os.arch()</code>//返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。<br>7  <code>os.release()</code>//返回操作系统的发行版本。<br>8  <code>os.uptime()</code>//返回操作系统运行的时间，以秒为单位。<br>9  <code>os.loadavg()</code>//返回一个包含 1、5、15 分钟平均负载的数组。<br>10  <code>os.totalmem()</code>//返回系统内存总量，单位为字节。<br>11  <code>os.freemem()</code>//返回操作系统空闲内存量，单位是字节。<br>12  <code>os.cpus()</code>//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。<br>13  <code>os.networkInterfaces()</code>//获得网络接口列表。</p>
<h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><p><code>os.EOL</code>//定义了操作系统的行尾符的常量。<br>实例<br>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'endianness : '</span> + os.endianness());<span class="comment">// CPU 的字节序</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'type : '</span> + os.type());<span class="comment">// 操作系统名</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'platform : '</span> + os.platform());<span class="comment">// 操作系统名</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'total memory : '</span> + os.totalmem() + <span class="string">" bytes."</span>);<span class="comment">// 系统内存总量</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'free memory : '</span> + os.freemem() + <span class="string">" bytes."</span>);<span class="comment">// 操作系统空闲内存量</span></div></pre></td></tr></table></figure></p>
<p>代码执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">node main.js </div><div class="line">endianness : LE</div><div class="line">type : Linux</div><div class="line">platform : linux</div><div class="line">total memory : 25103400960 bytes.</div><div class="line">free memory : 20676710400 bytes.</div></pre></td></tr></table></figure></p>
<h4 id="Node-js-Path-模块"><a href="#Node-js-Path-模块" class="headerlink" title="Node.js Path 模块"></a>Node.js Path 模块</h4><p>Node.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div></pre></td></tr></table></figure></p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>1  <code>path.normalize(p)</code>//规范化路径，注意’..’ 和 ‘.’。<br>2  <code>path.join([path1][, path2][, ...])</code>//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”。<br>3  <code>path.resolve([from ...], to)</code>//将 to 参数解析为绝对路径。<br>4  <code>path.isAbsolute(path)</code>//判断参数 path 是否是绝对路径。<br>5  <code>path.relative(from, to)</code>//用于将相对路径转为绝对路径。<br>6  <code>path.dirname(p)</code>//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。<br>7  <code>path.basename(p[, ext])</code>//返回路径中的最后一部分。同 Unix 命令 bashname 类似。<br>8  <code>path.extname(p)</code>//返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。<br>9  <code>path.parse(pathString)</code>//返回路径字符串的对象。<br>10  <code>path.format(pathObject)</code>//从对象中返回路径字符串，和 path.parse 相反。</p>
<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>1  <code>path.sep</code>//平台的文件路径分隔符，’\‘ 或 ‘/‘。<br>2  <code>path.delimiter</code>//平台的分隔符, ; or ‘:’.<br>3  <code>path.posix</code>//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。<br>4  <code>path.win32</code>//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="comment">// 格式化路径</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'normalization : '</span> + path.normalize(<span class="string">'/test/test1//2slashes/1slash/tab/..'</span>));</div><div class="line"><span class="comment">// 连接路径</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'joint path : '</span> + path.join(<span class="string">'/test'</span>, <span class="string">'test1'</span>, <span class="string">'2slashes/1slash'</span>, <span class="string">'tab'</span>, <span class="string">'..'</span>));</div><div class="line"><span class="comment">// 转换为绝对路径</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'resolve : '</span> + path.resolve(<span class="string">'main.js'</span>));</div><div class="line"><span class="comment">// 路径中文件的后缀名</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'ext name : '</span> + path.extname(<span class="string">'main.js'</span>));</div></pre></td></tr></table></figure></p>
<p>代码执行结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">node main.js </div><div class="line">normalization : <span class="regexp">/test/</span>test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</div><div class="line">joint path : <span class="regexp">/test/</span>test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</div><div class="line">resolve : <span class="regexp">/web/</span>com/<span class="number">1427176256</span>_27423/main.js</div><div class="line">ext name : .js</div></pre></td></tr></table></figure></p>
<h4 id="Node-js-Net-模块"><a href="#Node-js-Net-模块" class="headerlink" title="Node.js Net 模块"></a>Node.js Net 模块</h4><p>Node.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>)</div></pre></td></tr></table></figure></p>
<h5 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>net.createServer([options][, connectionListener])</code>//创建一个 TCP 服务器。参数 connectionListener 自动给 ‘connection’ 事件创建监听器。<br>2  <code>net.connect(options[, connectionListener])</code>//返回一个新的 ‘net.Socket’，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 ‘connect’ 事件。<br>3  <code>net.createConnection(options[, connectionListener])</code>//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 ‘localhost’。<br>4  <code>net.connect(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>5  <code>net.createConnection(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>6  <code>net.connect(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件上。返回 ‘net.Socket’。<br>7  <code>net.createConnection(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>8  <code>net.isIP(input)</code>//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。<br>9  <code>net.isIPv4(input)</code>//如果输入的地址为 IPV4， 返回 true，否则返回 false。<br>10  <code>net.isIPv6(input)</code>//如果输入的地址为 IPV6， 返回 true，否则返回 false。</p>
<h4 id="net-Server"><a href="#net-Server" class="headerlink" title="net.Server"></a>net.Server</h4><p>net.Server通常用于创建一个 TCP 或本地服务器。</p>
<h5 id="net-Server方法："><a href="#net-Server方法：" class="headerlink" title="net.Server方法："></a>net.Server方法：</h5><p>1  <code>server.listen(port[, host][, backlog][, callback])</code>//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。<br>2  <code>server.listen(path[, callback])</code>//通过指定 path 的连接，启动一个本地 socket 服务器。<br>3  <code>server.listen(handle[, callback])</code>//通过指定句柄连接。<br>4  <code>server.listen(options[, callback])</code>//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。<br>5  <code>server.close([callback])</code>//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 ‘close’ 事件。<br>6  <code>server.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。<br>7  <code>server.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。<br>8  <code>server.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。<br>9  <code>server.getConnections(callback)</code>//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。</p>
<h5 id="net-Server事件："><a href="#net-Server事件：" class="headerlink" title="net.Server事件："></a>net.Server事件：</h5><p>1  <code>listening</code>//当服务器调用 server.listen 绑定后会触发。<br>2  <code>connection</code>//当新连接创建后会被触发。socket 是 net.Socket实例。<br>3  <code>close</code>//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。<br>4  <code>error</code>//发生错误时触发。’close’ 事件将被下列事件直接调用。</p>
<h4 id="net-Socket"><a href="#net-Socket" class="headerlink" title="net.Socket"></a>net.Socket</h4><p>net.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。</p>
<h5 id="net-Socket事件："><a href="#net-Socket事件：" class="headerlink" title="net.Socket事件："></a>net.Socket事件：</h5><p>1  <code>lookup</code>//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。<br>2  <code>connect</code>//成功建立 socket 连接时触发。<br>3  <code>data</code>//当接收到数据时触发。<br>4  <code>end</code>//当 socket 另一端发送 FIN 包时，触发该事件。<br>5  <code>timeout</code>//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。<br>6  <code>drain</code>//当写缓存为空得时候触发。可用来控制上传。<br>7  <code>error</code>//错误发生时触发。<br>8  <code>close</code>//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。</p>
<h5 id="net-Socket属性："><a href="#net-Socket属性：" class="headerlink" title="net.Socket属性："></a>net.Socket属性：</h5><p>1  <code>socket.bufferSize</code>//该属性显示了要写入缓冲区的字节数。<br>2  <code>socket.remoteAddress</code>//远程的 IP 地址字符串，例如：’74.125.127.100’ or ‘2001:4860:a005::68’。<br>3  <code>socket.remoteFamily</code>//远程IP协议族字符串，比如 ‘IPv4’ or ‘IPv6’。<br>4  <code>socket.remotePort</code>//远程端口，数字表示，例如：80 or 21。<br>5  <code>socket.localAddress</code>//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听’0.0.0.0’而客户端连接在’192.168.1.1’，这个值就会是 ‘192.168.1.1’。<br>6  <code>socket.localPort</code>//本地端口地址，数字表示。例如：80 or 21。<br>7  <code>socket.bytesRead</code>//接收到得字节数。<br>8  <code>socket.bytesWritten</code>//发送的字节数。</p>
<h5 id="net-Socket方法："><a href="#net-Socket方法：" class="headerlink" title="net.Socket方法："></a>net.Socket方法：</h5><p>1  <code>new net.Socket([options])</code>//构造一个新的 socket 对象。<br>2  <code>socket.connect(port[, host][, connectListener])</code>//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>3  <code>socket.connect(path[, connectListener])</code>//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>4  <code>socket.setEncoding([encoding])</code>//设置编码<br>5  <code>socket.write(data[, encoding][, callback])</code>//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。<br>6  <code>socket.end([data][, encoding])</code>//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。<br>7  <code>socket.destroy()</code>//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。<br>8  <code>socket.pause()</code>//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。<br>9  <code>socket.resume()</code>//调用 pause() 后想恢复读取数据。<br>10  <code>socket.setTimeout(timeout[, callback])</code>//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。<br>11  <code>socket.setNoDelay([noDelay])</code>//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。<br>12  <code>socket.setKeepAlive([enable][, initialDelay])</code>//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.<br>13  <code>socket.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: ‘IPv4’, address: ‘127.0.0.1’ }。<br>14  <code>socket.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。<br>15  <code>socket.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。</p>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><p>创建 server.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">connection</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</div><div class="line">  connection.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端关闭连接'</span>);</div><div class="line">  &#125;);</div><div class="line">  connection.write(<span class="string">'Hello World!\r\n'</span>);</div><div class="line">  connection.pipe(connection);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server is listening'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上服务端代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js</div><div class="line">server is listening # 服务已创建并监听8080端口</div></pre></td></tr></table></figure></p>
<p>新开一个窗口，创建client.js文件，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> client = net.connect(&#123;<span class="attr">port</span>: <span class="number">8080</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'连接服务器！'</span>);</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data.toString());</div><div class="line">  client.end();</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'断开与服务器的连接'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上客户端的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">连接服务器！</div><div class="line">Hello World!</div><div class="line">断开与服务器的连接</div></pre></td></tr></table></figure></p>
<h4 id="Node-js-DNS-模块"><a href="#Node-js-DNS-模块" class="headerlink" title="Node.js DNS 模块"></a>Node.js DNS 模块</h4><p>Node.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">"dns"</span>)</div></pre></td></tr></table></figure></p>
<h5 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>dns.lookup(hostname[, options], callback)</code>//将域名（比如 ‘runoob.com’）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。<br>2  <code>dns.lookupService(address, port, callback)</code>//使用 getnameinfo 解析传入的地址和端口为域名和服务。<br>3  <code>dns.resolve(hostname[, rrtype], callback)</code>//将一个域名（如 ‘runoob.com’）解析为一个 rrtype 指定记录类型的数组。<br>4  <code>dns.resolve4(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，[‘74.125.79.104’, ‘74.125.79.105’, ‘74.125.79.106’]）。<br>5  <code>dns.resolve6(hostname, callback)</code>//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）<br>6  <code>dns.resolveMx(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。<br>7  <code>dns.resolveTxt(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ [‘v=spf1 ip4:0.0.0.0 ‘, ‘~all’ ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。<br>8  <code>dns.resolveSrv(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{‘priority’: 10, ‘weight’: 5, ‘port’: 21223, ‘name’: ‘service.example.com’}, …]）。<br>9  <code>dns.resolveSoa(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。<br>10  <code>dns.resolveNs(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, [‘ns1.example.com’, ‘ns2.example.com’]）。<br>11  <code>dns.resolveCname(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, [‘bar.example.com’]）。<br>12  <code>dns.reverse(ip, callback)</code>//反向解析 IP 地址，指向该 IP 地址的域名数组。<br>13  <code>dns.getServers()</code>//返回一个用于当前解析的 IP 地址数组的字符串。<br>14  <code>dns.setServers(servers)</code>//指定一组 IP 地址作为解析服务器。</p>
<h5 id="rrtypes"><a href="#rrtypes" class="headerlink" title="rrtypes"></a>rrtypes</h5><p>dns.resolve()方法中有效的rrtypes值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;A&apos; IPV4 地址, 默认</div><div class="line">&apos;AAAA&apos; IPV6 地址</div><div class="line">&apos;MX&apos; 邮件交换记录</div><div class="line">&apos;TXT&apos; text 记录</div><div class="line">&apos;SRV&apos; SRV 记录</div><div class="line">&apos;PTR&apos; 用来反向 IP 查找</div><div class="line">&apos;NS&apos; 域名服务器记录</div><div class="line">&apos;CNAME&apos; 别名记录</div><div class="line">&apos;SOA&apos; 授权记录的初始值</div></pre></td></tr></table></figure></p>
<h5 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h5><p>每次 DNS 查询都可能返回以下错误码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">dns.NODATA: 无数据响应。</div><div class="line">dns.FORMERR: 查询格式错误。</div><div class="line">dns.SERVFAIL: 常规失败。</div><div class="line">dns.NOTFOUND: 没有找到域名。</div><div class="line">dns.NOTIMP: 未实现请求的操作。</div><div class="line">dns.REFUSED: 拒绝查询。</div><div class="line">dns.BADQUERY: 查询格式错误。</div><div class="line">dns.BADNAME: 域名格式错误。</div><div class="line">dns.BADFAMILY: 地址协议不支持。</div><div class="line">dns.BADRESP: 回复格式错误。</div><div class="line">dns.CONNREFUSED: 无法连接到 DNS 服务器。</div><div class="line">dns.TIMEOUT: 连接 DNS 服务器超时。</div><div class="line">dns.EOF: 文件末端。</div><div class="line">dns.FILE: 读文件错误。</div><div class="line">dns.NOMEM: 内存溢出。</div><div class="line">dns.DESTRUCTION: 通道被摧毁。</div><div class="line">dns.BADSTR: 字符串格式错误。</div><div class="line">dns.BADFLAGS: 非法标识符。</div><div class="line">dns.NONAME: 所给主机不是数字。</div><div class="line">dns.BADHINTS: 非法HINTS标识符。</div><div class="line">dns.NOTINITIALIZED: c c-ares 库尚未初始化。</div><div class="line">dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。</div><div class="line">dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。</div><div class="line">dns.CANCELLED: 取消 DNS 查询。</div></pre></td></tr></table></figure></p>
<h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</div><div class="line">dns.lookup(<span class="string">'www.github.com'</span>,<span class="function"><span class="keyword">function</span> <span class="title">onLookup</span>(<span class="params">err, address, family</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ip 地址：'</span>, address);</div><div class="line">  dns.reverse(address, <span class="function"><span class="keyword">function</span>(<span class="params">err, hostname</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err.stack);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'反向解析'</span> + address + <span class="string">':'</span> + <span class="built_in">JSON</span>.stringify(hostname));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码，结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">address: 192.30.252.130</div><div class="line">reverse for 192.30.252.130: [&quot;github.com&quot;]</div></pre></td></tr></table></figure></p>
<h4 id="Node-js-Domain-模块"><a href="#Node-js-Domain-模块" class="headerlink" title="Node.js Domain 模块"></a>Node.js Domain 模块</h4><p>Node.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>)</div></pre></td></tr></table></figure></p>
<p>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on(‘uncaughtException’)不同。<br>Domain 模块可分为隐式绑定和显式绑定：<br>1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象<br>2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象</p>
<h5 id="方法：-3"><a href="#方法：-3" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>domain.run(function)</code>//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。<br>2  <code>domain.add(emitter)</code>//显式的增加事件<br>3  <code>domain.remove(emitter)</code>//删除事件。<br>4  <code>domain.bind(callback)</code>//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。<br>5  <code>domain.intercept(callback)</code>//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。<br>6  <code>domain.enter()</code>//进入一个异步调用的上下文，绑定到domain。<br>7  <code>domain.exit()</code>//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。<br>8  <code>domain.dispose()</code>//释放一个domain对象，让node进程回收这部分资源。<br>9  <code>domain.create()</code>//返回一个domain对象。</p>
<h5 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h5><p>1  <code>domain.menbers</code>//已加入domain对象的域定时器和事件发射器的数组。</p>
<h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>);</div><div class="line"><span class="keyword">var</span> emitter1 = <span class="keyword">new</span> EventEmitter();</div><div class="line"><span class="comment">// 创建域</span></div><div class="line"><span class="keyword">var</span> domain1 = domain.create();</div><div class="line">domain1.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"domain1 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 显式绑定</span></div><div class="line">domain1.add(emitter1);</div><div class="line">emitter1.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"监听器处理此错误 ("</span>+err.message+<span class="string">")"</span>);</div><div class="line">&#125;);</div><div class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过监听器来处理'</span>));</div><div class="line">emitter1.removeAllListeners(<span class="string">'error'</span>);</div><div class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain1 处理'</span>));</div><div class="line"><span class="keyword">var</span> domain2 = domain.create();</div><div class="line">domain2.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"domain2 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 隐式绑定</span></div><div class="line">domain2.run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> emitter2 = <span class="keyword">new</span> EventEmitter();</div><div class="line">   emitter2.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain2 处理'</span>));   </div><div class="line">&#125;);</div><div class="line">domain1.remove(emitter1);</div><div class="line">emitter1.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'转换为异常，系统将崩溃!'</span>));</div></pre></td></tr></table></figure></p>
<p>执行以上代码，结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">监听器处理此错误 (通过监听器来处理)</div><div class="line">domain1 处理这个错误 (通过 domain1 处理)</div><div class="line">domain2 处理这个错误 (通过 domain2 处理)</div><div class="line">events.js:72</div><div class="line">        throw er; // Unhandled &apos;error&apos; event</div><div class="line">              ^</div><div class="line">Error: 转换为异常，系统将崩溃!</div><div class="line">    at Object.&lt;anonymous&gt; (/www/node/main.js:40:24)</div><div class="line">    at Module._compile (module.js:456:26)</div><div class="line">    at Object.Module._extensions..js (module.js:474:10)</div><div class="line">    at Module.load (module.js:356:32)</div><div class="line">    at Function.Module._load (module.js:312:12)</div><div class="line">    at Function.Module.runMain (module.js:497:10)</div><div class="line">    at startup (node.js:119:16)</div><div class="line">    at node.js:929:3</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;13、Node-js-工具模块&quot;&gt;&lt;a href=&quot;#13、Node-js-工具模块&quot; class=&quot;headerlink&quot; title=&quot;13、Node.js 工具模块&quot;&gt;&lt;/a&gt;13、Node.js 工具模块&lt;/h3&gt;&lt;h4 id=&quot;Node-js-OS-模块&quot;&gt;&lt;a href=&quot;#Node-js-OS-模块&quot; class=&quot;headerlink&quot; title=&quot;Node.js OS 模块&quot;&gt;&lt;/a&gt;Node.js OS 模块&lt;/h4&gt;&lt;p&gt;Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; os = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;方法：&quot;&gt;&lt;a href=&quot;#方法：&quot; class=&quot;headerlink&quot; title=&quot;方法：&quot;&gt;&lt;/a&gt;方法：&lt;/h5&gt;&lt;p&gt;1  &lt;code&gt;os.tmpdir()&lt;/code&gt;//返回操作系统的默认临时文件夹。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js GET/POST请求(12)</title>
    <link href="https://wpneu.github.io/2016/06/29/Node.js%20GET%20POST%E8%AF%B7%E6%B1%82.html"/>
    <id>https://wpneu.github.io/2016/06/29/Node.js GET POST请求.html</id>
    <published>2016-06-29T07:38:20.000Z</published>
    <updated>2017-07-30T07:21:47.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12、Node-js-GET-POST请求"><a href="#12、Node-js-GET-POST请求" class="headerlink" title="12、Node.js GET/POST请求"></a>12、Node.js GET/POST请求</h3><h4 id="获取GET请求内容"><a href="#获取GET请求内容" class="headerlink" title="获取GET请求内容"></a>获取GET请求内容</h4><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">  res.end(util.inspect(url.parse(req.url, <span class="literal">true</span>)));</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问<code>http://localhost:3000/user?name=w3c&amp;email=w3c@w3cschool.cc</code> 然后查看返回结果:<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Url &#123;</div><div class="line">  protocol: <span class="literal">null</span>,</div><div class="line">  slashes: <span class="literal">null</span>,</div><div class="line">  auth: <span class="literal">null</span>,</div><div class="line">  host: <span class="literal">null</span>,</div><div class="line">  port: <span class="literal">null</span>,</div><div class="line">  hostname: <span class="literal">null</span>,</div><div class="line">  hash: <span class="literal">null</span>,</div><div class="line">  search: <span class="string">'?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</div><div class="line">  query: &#123; <span class="attr">name</span>: <span class="string">'w3c'</span>, <span class="attr">email</span>: <span class="string">'w3c@w3cschool.cc'</span> &#125;,</div><div class="line">  pathname: <span class="string">'/user'</span>,</div><div class="line">  path: <span class="string">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</div><div class="line">  href: <span class="string">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="获取POST请求内容"><a href="#获取POST请求内容" class="headerlink" title="获取POST请求内容"></a>获取POST请求内容</h4><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> post = <span class="string">''</span>;<span class="comment">//定义了一个post变量，用于暂存请求体的信息</span></div><div class="line">  req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;<span class="comment">//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></div><div class="line">    post += chunk;</div><div class="line">  &#125;);</div><div class="line">  req.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></div><div class="line">    post = querystring.parse(post);</div><div class="line">    res.end(util.inspect(post));</div><div class="line">  &#125;);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12、Node-js-GET-POST请求&quot;&gt;&lt;a href=&quot;#12、Node-js-GET-POST请求&quot; class=&quot;headerlink&quot; title=&quot;12、Node.js GET/POST请求&quot;&gt;&lt;/a&gt;12、Node.js GET/POST请求&lt;/h3&gt;&lt;h4 id=&quot;获取GET请求内容&quot;&gt;&lt;a href=&quot;#获取GET请求内容&quot; class=&quot;headerlink&quot; title=&quot;获取GET请求内容&quot;&gt;&lt;/a&gt;获取GET请求内容&lt;/h4&gt;&lt;p&gt;由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; util = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;util&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.end(util.inspect(url.parse(req.url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中访问&lt;code&gt;http://localhost:3000/user?name=w3c&amp;amp;email=w3c@w3cschool.cc&lt;/code&gt; 然后查看返回结果:&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 文件系统(11)</title>
    <link href="https://wpneu.github.io/2016/06/29/Node.js%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://wpneu.github.io/2016/06/29/Node.js 文件系统.html</id>
    <published>2016-06-29T05:35:20.000Z</published>
    <updated>2017-07-30T07:21:47.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="11、Node-js-文件系统"><a href="#11、Node-js-文件系统" class="headerlink" title="11、Node.js 文件系统"></a>11、Node.js 文件系统</h3><p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="comment">//读取文件内容</span></div><div class="line">fs.readFile(filename, [options], callback)<span class="comment">//异步读取文件内容。</span></div><div class="line">fs.readFileSync(filename, [options])<span class="comment">//同步读取文件内容。</span></div></pre></td></tr></table></figure></p>
<p>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。<br><a id="more"></a></p>
<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p><code>fs.open(path, flags, [mode], callback)</code>//异步打开文件。<br>    path-文件路径；flag-文件打开行为；mode-设置文件模式(默认:0666-可读可写)；callback - 回调函数，带有两个参数如：callback(err, fd)。<br>flags参数描述：<br>1  <code>r</code> //以读取模式打开文件。如果文件不存在抛出异常。<br>2  <code>r+</code> //以读写模式打开文件。如果文件不存在抛出异常。<br>3  <code>rs</code> //以同步的方式读取文件。<br>4  <code>rs+</code> //以同步的方式读取和写入文件。<br>5  <code>w</code> //以写入模式打开文件，如果文件不存在则创建。<br>6  <code>wx</code> //类似 ‘w’，但是如果文件路径存在，则文件写入失败。<br>7  <code>w+</code> //以读写模式打开文件，如果文件不存在则创建。<br>8  <code>wx+</code> //类似 ‘w+’， 但是如果文件路径存在，则文件读写失败。<br>9  <code>a</code> //以追加模式打开文件，如果文件不存在则创建。<br>10  <code>ax</code> //类似 ‘a’， 但是如果文件路径存在，则文件追加失败。<br>11  <code>a+</code> //以读取追加模式打开文件，如果文件不存在则创建。<br>12  <code>ax+</code> //类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。</p>
<h4 id="读取文件信息"><a href="#读取文件信息" class="headerlink" title="读取文件信息"></a>读取文件信息</h4><p><code>fs.stat(path, callback)</code>//通过异步模式获取文件信息.<br>    path - 文件路径。callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。<br>fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。<br>stats类中方法有：<br>1  <code>stats.isFile()</code>//如果是文件返回 true，否则返回 false。<br>2  <code>stats.isDirectory()</code>//如果是目录返回 true，否则返回 false。<br>3  <code>stats.isBlockDevice()</code>//如果是块设备返回 true，否则返回 false。<br>4  <code>stats.isCharacterDevice()</code>//如果是字符设备返回 true，否则返回 false。<br>5  <code>stats.isSymbolicLink()</code>//如果是软链接返回 true，否则返回 false。<br>6  <code>stats.isFIFO()</code>//如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。<br>7  <code>stats.isSocket()</code>//如果是 Socket 返回 true，否则返回 false。</p>
<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p><code>fs.writeFile(filename, data, [options], callback)</code>//异步写入文件<br>    path-文件路径；data-要写入的数据，可以是String或Buffer(流)对象；options-该参数是一个对象，包含{encoding,mode,flag}默认utf8 ,0666,’w’；callback-回调函数，只包含错误信息参数(err),在写入失败是返回。</p>
<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p><code>fs.read(fd, buffer, offset, length, position, callback)</code>//异步模式下使用文件描述符来读取文件。<br>    fd-通过fs.open()方法返回文件描述符；buffer-数据写入的缓冲区；offset-缓冲区写入的写入偏移量；length-要从文件中读取的字节数；position-文件读取的起始位置，值为null则会从当前文件指针位置读取；callback-回调函数，有三个参数err错误信息,bytesRead字节数,buffer缓冲区对象.</p>
<h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><p><code>fs.close(fd, callback)</code>//异步模式下关闭文件,该方法使用了文件描述符来读取文件。<br>    fd - 通过 fs.open() 方法返回的文件描述符; callback - 回调函数，没有参数。</p>
<h4 id="截取文件"><a href="#截取文件" class="headerlink" title="截取文件"></a>截取文件</h4><p><code>fs.ftruncate(fd, len, callback)</code>//异步模式下截取文件,该方法使用了文件描述符来读取文件。<br>    fd - 通过 fs.open() 方法返回的文件描述符; len - 文件内容截取的长度; callback - 回调函数，没有参数。</p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><code>fs.unlink(path, callback)</code><br>    path - 文件路径; callback - 回调函数，没有参数。</p>
<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p><code>fs.mkdir(path[, mode], callback)</code><br>    path - 文件路径; mode - 设置目录权限，默认为 0777; callback - 回调函数，没有参数。</p>
<h4 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h4><p><code>fs.readdir(path, callback)</code><br>    path - 文件路径; callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。</p>
<h4 id="文件模块方法参考手册"><a href="#文件模块方法参考手册" class="headerlink" title="文件模块方法参考手册"></a>文件模块方法参考手册</h4><p>1  <code>fs.rename(oldPath, newPath, callback)</code>//异步 rename().回调函数没有参数，但可能抛出异常。<br>2  <code>fs.ftruncate(fd, len, callback)</code>//异步 ftruncate().回调函数没有参数，但可能抛出异常。<br>3  <code>fs.ftruncateSync(fd, len)</code>//同步 ftruncate()<br>4  <code>fs.truncate(path, len, callback)</code>//异步 truncate().回调函数没有参数，但可能抛出异常。<br>5  <code>fs.truncateSync(path, len)</code>//同步 truncate()<br>6  <code>fs.chown(path, uid, gid, callback)</code>//异步 chown().回调函数没有参数，但可能抛出异常。<br>7  <code>fs.chownSync(path, uid, gid)</code>//同步 chown()<br>8  <code>fs.fchown(fd, uid, gid, callback)</code>//异步 fchown().回调函数没有参数，但可能抛出异常。<br>9  <code>fs.fchownSync(fd, uid, gid)</code>//同步 fchown()<br>10  <code>fs.lchown(path, uid, gid, callback)</code>//异步 lchown().回调函数没有参数，但可能抛出异常。<br>11  <code>fs.lchownSync(path, uid, gid)</code>//同步 lchown()<br>12  <code>fs.chmod(path, mode, callback)</code>//异步 chmod().回调函数没有参数，但可能抛出异常。<br>13  <code>fs.chmodSync(path, mode)</code>//同步 chmod().<br>14  <code>fs.fchmod(fd, mode, callback)</code>//异步 fchmod().回调函数没有参数，但可能抛出异常。<br>15  <code>fs.fchmodSync(fd, mode)</code>//同步 fchmod().<br>16  <code>fs.lchmod(path, mode, callback)</code>//异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.<br>17  <code>fs.lchmodSync(path, mode)</code>//同步 lchmod().<br>18  <code>fs.stat(path, callback)</code>//异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>19  <code>fs.lstat(path, callback)</code>//异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>20  <code>fs.fstat(fd, callback)</code>//异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>21  <code>fs.statSync(path)</code>//同步 stat(). 返回 fs.Stats 的实例。<br>22  <code>fs.lstatSync(path)</code>//同步 lstat(). 返回 fs.Stats 的实例。<br>23  <code>fs.fstatSync(fd)</code>//同步 fstat(). 返回 fs.Stats 的实例。<br>24  <code>fs.link(srcpath, dstpath, callback)</code>//异步 link().回调函数没有参数，但可能抛出异常。<br>25  <code>fs.linkSync(srcpath, dstpath)</code>//同步 link().<br>26  <code>fs.symlink(srcpath, dstpath[, type], callback)</code>//异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 ‘dir’, ‘file’, 或 ‘junction’ (默认为 ‘file’) 。<br>27  <code>fs.symlinkSync(srcpath, dstpath[, type])</code>//同步 symlink().<br>28  <code>fs.readlink(path, callback)</code>//异步 readlink(). 回调函数有两个参数 err, linkString。<br>29  <code>fs.realpath(path[, cache], callback)</code>//异步 realpath(). 回调函数有两个参数 err, resolvedPath。<br>30  <code>fs.realpathSync(path[, cache])</code>//同步 realpath()。返回绝对路径。<br>31  <code>fs.unlink(path, callback)</code>//异步 unlink().回调函数没有参数，但可能抛出异常。<br>32  <code>fs.unlinkSync(path)</code>//同步 unlink().<br>33  <code>fs.rmdir(path, callback)</code>//异步 rmdir().回调函数没有参数，但可能抛出异常。<br>34  <code>fs.rmdirSync(path)</code>//同步 rmdir().<br>35  <code>fs.mkdir(path[, mode], callback)</code>//S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.<br>36  <code>fs.mkdirSync(path[, mode])</code>//同步 mkdir().<br>37  <code>fs.readdir(path, callback)</code>//异步 readdir(3). 读取目录的内容。<br>38  <code>fs.readdirSync(path)</code>//同步 readdir().返回文件数组列表。<br>39  <code>fs.close(fd, callback)</code>//异步 close().回调函数没有参数，但可能抛出异常。<br>40  <code>fs.closeSync(fd)</code>//同步 close().<br>41  <code>fs.open(path, flags[, mode], callback)</code>//异步打开文件。<br>42  <code>fs.openSync(path, flags[, mode])</code>//同步 version of fs.open().<br>43  <code>fs.utimes(path, atime, mtime, callback)
44</code>fs.utimesSync(path, atime, mtime)<code>//修改文件时间戳，文件通过指定的文件路径。
45</code>fs.futimes(fd, atime, mtime, callback)<br>46  <code>fs.futimesSync(fd, atime, mtime)</code>//修改文件时间戳，通过文件描述符指定。<br>47  <code>fs.fsync(fd, callback)</code>//异步 fsync.回调函数没有参数，但可能抛出异常。<br>48  <code>fs.fsyncSync(fd)</code>//同步 fsync.<br>49  <code>fs.write(fd, buffer, offset, length[, position], callback)</code>//将缓冲区内容写入到通过文件描述符指定的文件。<br>50  <code>fs.write(fd, data[, position[, encoding]], callback)</code>//通过文件描述符 fd 写入文件内容。<br>51  <code>fs.writeSync(fd, buffer, offset, length[, position])</code>//同步版的 fs.write()。<br>52  <code>fs.writeSync(fd, data[, position[, encoding]])</code>//同步版的 fs.write().<br>53  <code>fs.read(fd, buffer, offset, length, position, callback)</code>//通过文件描述符 fd 读取文件内容。<br>54  <code>fs.readSync(fd, buffer, offset, length, position)</code>//同步版的 fs.read.<br>55  <code>fs.readFile(filename[, options], callback)</code>//异步读取文件内容。<br>56  <code>fs.readFileSync(filename[, options])
57</code>fs.writeFile(filename, data[, options], callback)<br>异步写入<code>文件内容。
58</code>fs.writeFileSync(filename, data[, options])<code>//同步版的 fs.writeFile。
59</code>fs.appendFile(filename, data[, options], callback)<code>//异步追加文件内容。
60</code>fs.appendFileSync(filename, data[, options])<code>//The 同步 version of fs.appendFile.
61</code>fs.watchFile(filename[, options], listener)<code>//查看文件的修改。
62</code>fs.unwatchFile(filename[, listener])<code>//停止查看 filename 的修改。
63</code>fs.watch(filename[, options][, listener])<code>//查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。
64</code>fs.exists(path, callback)<code>//检测给定的路径是否存在。
65</code>fs.existsSync(path)<code>//同步版的 fs.exists.
66</code>fs.access(path[, mode], callback)<code>//测试指定路径用户权限。
67</code>fs.accessSync(path[, mode])<code>//同步版的 fs.access。
68</code>fs.createReadStream(path[, options])<code>//返回ReadStream 对象。
69</code>fs.createWriteStream(path[, options])<code>//返回 WriteStream 对象。
70</code>fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;11、Node-js-文件系统&quot;&gt;&lt;a href=&quot;#11、Node-js-文件系统&quot; class=&quot;headerlink&quot; title=&quot;11、Node.js 文件系统&quot;&gt;&lt;/a&gt;11、Node.js 文件系统&lt;/h3&gt;&lt;p&gt;Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//读取文件内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fs.readFile(filename, [options], callback)&lt;span class=&quot;comment&quot;&gt;//异步读取文件内容。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fs.readFileSync(filename, [options])&lt;span class=&quot;comment&quot;&gt;//同步读取文件内容。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>sublime text3个人习惯配置</title>
    <link href="https://wpneu.github.io/2016/06/29/sublime-text3%E4%B8%AA%E4%BA%BA%E4%B9%A0%E6%83%AF%E9%85%8D%E7%BD%AE-C.html"/>
    <id>https://wpneu.github.io/2016/06/29/sublime-text3个人习惯配置-C.html</id>
    <published>2016-06-29T01:41:48.000Z</published>
    <updated>2017-07-30T07:21:47.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>分别在官网下载并安装 <a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs</a> 和 <a href="https://www.sublimetext.com/3" target="_blank" rel="external">sublime text3</a>。</p>
<h3 id="2、sublime-text3注册："><a href="#2、sublime-text3注册：" class="headerlink" title="2、sublime text3注册："></a>2、sublime text3注册：</h3><a id="more"></a> 
<p>点击菜单【help】－&gt;【Enter License】，粘贴下面注册码(亲测v3103可用 ):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">—– BEGIN LICENSE —–</div><div class="line">Ryan Clark</div><div class="line">Single User License</div><div class="line">EA7E-812479</div><div class="line">2158A7DE B690A7A3 8EC04710 006A5EEB</div><div class="line">34E77CA3 9C82C81F 0DB6371B 79704E6F</div><div class="line">93F36655 B031503A 03257CCC 01B20F60</div><div class="line">D304FA8D B1B4F0AF 8A76C7BA 0FA94D55</div><div class="line">56D46BCE 5237A341 CD837F30 4D60772D</div><div class="line">349B1179 A996F826 90CDB73C 24D41245</div><div class="line">FD032C30 AD5E7241 4EAA66ED 167D91FB</div><div class="line">55896B16 EA125C81 F550AF6B A6820916</div><div class="line">—— END LICENSE ——</div></pre></td></tr></table></figure></p>
<h3 id="3、安装package-control组件，用于管理所有插件"><a href="#3、安装package-control组件，用于管理所有插件" class="headerlink" title="3、安装package control组件，用于管理所有插件"></a>3、安装package control组件，用于管理所有插件</h3><p>按ctrl + ~调出控制台(或点击菜单栏的【View】-&gt;【Show Console】)，在Console窗口中输入以下代码，按回车键：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).<span class="built_in">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class="built_in">print</span>(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</div></pre></td></tr></table></figure></p>
<p>等待安装完毕，重启Sublime Text3。<br>按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：</p>
<h3 id="4、用Package-Control安装插件"><a href="#4、用Package-Control安装插件" class="headerlink" title="4、用Package Control安装插件"></a>4、用Package Control安装插件</h3><p>按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）<br><code>Material Theme</code><br><code>Emmet</code><br><code>CSS Format</code><br><code>CSScomb</code><br><code>jsFormat</code><br><code>AutoFileName</code><br><code>Autoprefixer</code><br><code>Doc Blockr</code><br><code>SublimeLinter</code><br><code>SublimeLinter-jshint</code><br><code>SublimeLinter-csslint</code><br><code>Color Highlighter</code><br><code>BracketHighlighter</code></p>
<h3 id="5、配置nodejs"><a href="#5、配置nodejs" class="headerlink" title="5、配置nodejs"></a>5、配置nodejs</h3><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><p>(1)下载sublime Text的<a href="https://github.com/tanepiper/SublimeText-Nodejs" target="_blank" rel="external">nodejs插件</a><br>(2)下载后解压:直接改名为nodejs 放到 Preferences–&gt;浏览程序包Browse Packages所在的文件夹<br>(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"cmd"</span>: [<span class="string">"node"</span>, <span class="string">"$file"</span>],</div><div class="line">  <span class="attr">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</div><div class="line">  <span class="attr">"selector"</span>: <span class="string">"source.js"</span>,</div><div class="line">  <span class="attr">"shell"</span>:<span class="literal">true</span>,</div><div class="line">  <span class="attr">"encoding"</span>: <span class="string">"cp1252"</span>, </div><div class="line">  <span class="attr">"windows"</span>: </div><div class="line">    &#123; </div><div class="line">        <span class="attr">"cmd"</span>: [<span class="string">"taskkill /F /IM node.exe &amp; node"</span>, <span class="string">"$file"</span>] </div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"linux"</span>:</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"cmd"</span>: [<span class="string">"killall node; node"</span>, <span class="string">"$file"</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"osx"</span>:</div><div class="line">    &#123;</div><div class="line">  <span class="attr">"cmd"</span>: [<span class="string">"killall node; node $file"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(4)修改为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"cmd"</span>: [<span class="string">"node"</span>, <span class="string">"$file"</span>],</div><div class="line">  <span class="attr">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</div><div class="line">  <span class="attr">"selector"</span>: <span class="string">"source.js"</span>,</div><div class="line">  <span class="attr">"shell"</span>:<span class="literal">true</span>,</div><div class="line">  <span class="attr">"encoding"</span>: <span class="string">"utf-8"</span>,</div><div class="line">  <span class="attr">"windows"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"cmd"</span>: [<span class="string">"taskkill /F /IM node.exe"</span>, <span class="string">""</span>],</div><div class="line">      <span class="attr">"cmd"</span>: [<span class="string">"node"</span>, <span class="string">"$file"</span>]</div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"linux"</span>:</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"cmd"</span>: [<span class="string">"killall node; node"</span>, <span class="string">"$file"</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"osx"</span>:</div><div class="line">    &#123;</div><div class="line">  <span class="attr">"cmd"</span>: [<span class="string">"killall node; node $file"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(5)完成:随便写一段nodejs代码，ctrl+B运行<br>(6)注意：在手动解压sublime Text插件后，需要在preference-&gt;package settings-&gt;package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。</p>
<h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><p>首先需要先安装<a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs</a>。<br>(1)运行Sublime,菜单上找到Tools —&gt; Build System —&gt; new Build System<br>(2)输入：<br>{<br>  “cmd”: [“node”, “$file”],<br>  “file_regex”: “^[ ]<em>File \”(…</em>?)\”, line ([0-9]*)”,<br>  “selector”: “source.js”,<br>  “shell”:true,<br>  “encoding”: “utf-8”,<br>  “windows”:<br>    {<br>      “cmd”: [“taskkill /F /IM node.exe”, “”],<br>      “cmd”: [“node”, “$file”]<br>    }<br>}<br>(3)保存文件为NodeJs.sublime-build<br>(4)菜单上找到Tools —&gt; Build System —&gt;选择 NodeJs<br>(5)安装sublime插件 JavaScript &amp; NodeJs Snippets<br>(6)新建test.js文件，输入 console.log(‘Hello Node.js’); 按快捷键 Ctrl + B 运行，成功输出</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;1、安装&lt;/h3&gt;&lt;p&gt;分别在官网下载并安装 &lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs&lt;/a&gt; 和 &lt;a href=&quot;https://www.sublimetext.com/3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sublime text3&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2、sublime-text3注册：&quot;&gt;&lt;a href=&quot;#2、sublime-text3注册：&quot; class=&quot;headerlink&quot; title=&quot;2、sublime text3注册：&quot;&gt;&lt;/a&gt;2、sublime text3注册：&lt;/h3&gt;
    
    </summary>
    
      <category term="前端工具" scheme="https://wpneu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="sublime" scheme="https://wpneu.github.io/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>Node.js常用工具(10)</title>
    <link href="https://wpneu.github.io/2016/06/29/Node.js%20%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html"/>
    <id>https://wpneu.github.io/2016/06/29/Node.js 常用工具.html</id>
    <published>2016-06-29T00:10:03.000Z</published>
    <updated>2017-07-30T07:21:47.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="10、Node-js-常用工具"><a href="#10、Node-js-常用工具" class="headerlink" title="10、Node.js 常用工具"></a>10、Node.js 常用工具</h3><p><code>util</code> 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。<br><a id="more"></a></p>
<h4 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h4><p><code>util.inherits(constructor, superConstructor)</code>//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。<br>在这里我们只介绍<code>util.inherits</code> 的用法，示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'base'</span>;</div><div class="line">  <span class="keyword">this</span>.base = <span class="number">1991</span>;</div><div class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">&#125; </div><div class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'sub'</span>;</div><div class="line">&#125;</div><div class="line">util.inherits(Sub, Base);</div><div class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base();</div><div class="line">objBase.showName();</div><div class="line">objBase.sayHello();</div><div class="line"><span class="built_in">console</span>.log(objBase);</div><div class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub();</div><div class="line">objSub.showName();</div><div class="line"><span class="built_in">console</span>.log(objSub);</div></pre></td></tr></table></figure></p>
<p>我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过<code>util.inherits</code> 实现继承。运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">base </div><div class="line">Hello base </div><div class="line">&#123; name: &apos;base&apos;, base: 1991, sayHello: [Function] &#125; </div><div class="line">sub </div><div class="line">&#123; name: &apos;sub&apos; &#125;</div></pre></td></tr></table></figure></p>
<p>注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.</p>
<h4 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h4><p><code>util.inspect(object,[showHidden],[depth],[colors])</code>//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。<br>-<code>showHidden</code>//是一个可选参数，如果值为 true，将会输出更多隐藏信息。<br>-<code>depth</code>//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。<br>-<code>colors</code>//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。<br>特别要指出的是，<code>util.inspect</code> 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'byvoid'</span>;</div><div class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(util.inspect(obj));</div><div class="line"><span class="built_in">console</span>.log(util.inspect(obj,<span class="literal">true</span>));</div><div class="line"><span class="comment">//运行结果是： </span></div><div class="line">Person &#123; <span class="attr">name</span>: <span class="string">'byvoid'</span>, <span class="attr">toString</span>: [<span class="built_in">Function</span>] &#125;</div><div class="line">Person &#123;</div><div class="line">  name: <span class="string">'byvoid'</span>,</div><div class="line">  toString:</div><div class="line">   &#123; [<span class="built_in">Function</span>]</div><div class="line">     [length]: <span class="number">0</span>,</div><div class="line">     [name]: <span class="string">''</span>,</div><div class="line">     [<span class="built_in">arguments</span>]: <span class="literal">null</span>,</div><div class="line">     [caller]: <span class="literal">null</span>,</div><div class="line">     [prototype]: &#123; [<span class="keyword">constructor</span>]: [Circular] &#125; </div><div class="line">  &#125; &#125;</div></pre></td></tr></table></figure></p>
<h4 id="util-isArray"><a href="#util-isArray" class="headerlink" title="util.isArray"></a>util.isArray</h4><p><code>util.isArray(object)</code>//如果给定的参数 “object” 是一个数组返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">util.isArray([]);<span class="comment">// true</span></div><div class="line">util.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>);<span class="comment">// true</span></div><div class="line">util.isArray(&#123;&#125;);<span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h4 id="util-isRegExp"><a href="#util-isRegExp" class="headerlink" title="util.isRegExp"></a>util.isRegExp</h4><p><code>util.isRegExp(object)</code>//如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">util.isRegExp(<span class="regexp">/some regexp/</span>);<span class="comment">// true</span></div><div class="line">util.isRegExp(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'another regexp'</span>));<span class="comment">// true</span></div><div class="line">util.isRegExp(&#123;&#125;);<span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h4 id="util-isDate"><a href="#util-isDate" class="headerlink" title="util.isDate"></a>util.isDate</h4><p><code>util.isDate(object)</code>// 如果给定的参数 “object” 是一个日期返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">util.isDate(<span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">// true</span></div><div class="line">util.isDate(<span class="built_in">Date</span>());<span class="comment">// false (without 'new' returns a String)</span></div><div class="line">util.isDate(&#123;&#125;);<span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<h4 id="util-isError"><a href="#util-isError" class="headerlink" title="util.isError"></a>util.isError</h4><p><code>util.isError(object)</code>// 如果给定的参数 “object” 是一个错误对象返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line">util.isError(<span class="keyword">new</span> <span class="built_in">Error</span>());<span class="comment">// true</span></div><div class="line">util.isError(<span class="keyword">new</span> <span class="built_in">TypeError</span>());<span class="comment">// true</span></div><div class="line">util.isError(&#123; <span class="attr">name</span>: <span class="string">'Error'</span>, <span class="attr">message</span>: <span class="string">'an error occurred'</span> &#125;);<span class="comment">// false</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;10、Node-js-常用工具&quot;&gt;&lt;a href=&quot;#10、Node-js-常用工具&quot; class=&quot;headerlink&quot; title=&quot;10、Node.js 常用工具&quot;&gt;&lt;/a&gt;10、Node.js 常用工具&lt;/h3&gt;&lt;p&gt;&lt;code&gt;util&lt;/code&gt; 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 全局对象(9)</title>
    <link href="https://wpneu.github.io/2016/06/28/Node.js%20%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1.html"/>
    <id>https://wpneu.github.io/2016/06/28/Node.js 全局对象.html</id>
    <published>2016-06-28T12:42:07.000Z</published>
    <updated>2017-07-30T07:21:47.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9、Node-js-全局对象"><a href="#9、Node-js-全局对象" class="headerlink" title="9、Node.js 全局对象"></a>9、Node.js 全局对象</h3><p>在浏览器 <code>JavaScript</code> 中，通常 <code>window</code> 是全局对象， 而 <code>Node.js</code> 中的全局对象是 <code>global</code>，所有全局变量（除了 <code>global</code>本身以外）都是 <code>global</code> 对象的属性。 在 <code>Node.js</code> 我们可以直接访问到 <code>global</code> 的属性，而不需要在应用中包含它。<br><a id="more"></a></p>
<h4 id="全局对象与全局变量"><a href="#全局对象与全局变量" class="headerlink" title="全局对象与全局变量"></a>全局对象与全局变量</h4><p><code>global</code> 全局对象最根本的作用是作为全局变量的宿主。按照 <code>ECMAScript</code> 的定义，满足以下条 件的变量是全局变量：<br>  -在最外层定义的变量；<br>  -全局对象的属性；<br>  -隐式定义的变量（未定义直接赋值的变量）。<br>当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。</p>
<h5 id="filename"><a href="#filename" class="headerlink" title="__filename"></a>__filename</h5><p><code>__filename</code>表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。<br>实例：创建<code>main.js</code>：<br>输出全局变量 <code>__filename</code> 的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( __filename );</div></pre></td></tr></table></figure></p>
<p>执行 main.js 文件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node main.js</div><div class="line">/web/com/runoob/nodejs/main.js</div></pre></td></tr></table></figure></p>
<h5 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h5><p><code>__dirname</code> 表示当前执行脚本所在的目录。<br>实例：创建<code>main.js</code>：<br>输出全局变量 <code>__dirname</code> 的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( __dirname );</div></pre></td></tr></table></figure></p>
<p>执行 main.js 文件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node main.js</div><div class="line">/web/com/runoob/nodejs</div></pre></td></tr></table></figure></p>
<h5 id="setTimeout-cb-ms"><a href="#setTimeout-cb-ms" class="headerlink" title="setTimeout(cb, ms)"></a>setTimeout(cb, ms)</h5><p><code>setTimeout(cb, ms)</code> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：<code>setTimeout()</code>只执行一次指定函数。返回一个代表定时器的句柄值。<br>实例:创建文件 main.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello, World!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//两秒后执行以上函数</span></div><div class="line">setTimeout(printHello, <span class="number">2000</span>);</div></pre></td></tr></table></figure></p>
<p>//执行 main.js 文件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node main.js</div><div class="line">Hello, World!</div></pre></td></tr></table></figure></p>
<h5 id="clearTimeout-t"><a href="#clearTimeout-t" class="headerlink" title="clearTimeout(t)"></a>clearTimeout(t)</h5><p>clearTimeout(t) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。<br>实例:创建文件 main.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello, World!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//两秒后执行以上函数</span></div><div class="line"><span class="keyword">var</span> t = setTimeout(printHello, <span class="number">2000</span>);</div><div class="line"><span class="comment">//清除定时器</span></div><div class="line">clearTimeout(t)</div></pre></td></tr></table></figure></p>
<p>执行 main.js 文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node main.js</div></pre></td></tr></table></figure></p>
<h5 id="setInterval-cb-ms-clearInterval-t"><a href="#setInterval-cb-ms-clearInterval-t" class="headerlink" title="setInterval(cb, ms), clearInterval(t)"></a>setInterval(cb, ms), clearInterval(t)</h5><p><code>setInterval(cb, ms)</code> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 <code>clearInterval(t)</code> 函数来清除定时器。<code>setInterval()</code> 方法会不停地调用函数，直到 <code>clearInterval()</code> 被调用或窗口被关闭。<br>实例:创建文件 main.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello, World!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//两秒后执行以上函数</span></div><div class="line">setInterval(printHello, <span class="number">2000</span>);</div></pre></td></tr></table></figure></p>
<p>执行 main.js 文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node main.js</div><div class="line">Hello, World! Hello, World! Hello, World ……</div></pre></td></tr></table></figure></p>
<p>以上程序每隔两秒就会输出一次”Hello, World!”，且会永久执行下去，直到你按下 <code>ctrl + c</code> 按钮.</p>
<h5 id="console"><a href="#console" class="headerlink" title="console"></a>console</h5><p>console 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的事实标准。Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。<br>console方法：<br>-<code>console.log([data], [...])</code>//向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。<br>-<code>console.info([data], [...])</code>//P该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。<br>-<code>console.error([data], [...])</code>//输出错误消息的。控制台在出现错误时会显示是红色的叉子。<br>-<code>console.warn([data], [...])</code>//输出警告消息。控制台出现有黄色的惊叹号。<br>-<code>console.dir(obj, [options])</code>//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。<br>-<code>console.time(label)</code>//输出时间，表示计时开始。<br>-<code>console.timeEnd(label)</code>//结束时间，表示计时结束。<br>-<code>console.trace(message, [...])</code>//当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。<br>-<code>console.assert(value, [message], [...])</code>//用于判断某个表达式或变量是否为真，接手两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</p>
<h5 id="process"><a href="#process" class="headerlink" title="process"></a>process</h5><p><code>process</code> 是一个全局变量，即 <code>global</code> 对象的属性。它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。</p>
<h6 id="process-对象的一些最常用的成员方法"><a href="#process-对象的一些最常用的成员方法" class="headerlink" title="process 对象的一些最常用的成员方法:"></a>process 对象的一些最常用的成员方法:</h6><p>-<code>exit</code>//当进程准备退出时触发。<br>-<code>beforeExit</code>//当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 ‘beforeExit’ 的监听器可以异步调用，这样 node 就会继续执行。<br>-<code>uncaughtException</code>//当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。<br>-<code>Signal</code> 事件//当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。<br>-退出状态码：1,2,3,4,5,6,7,8,9,10,12,&gt;128</p>
<h6 id="Process属性："><a href="#Process属性：" class="headerlink" title="Process属性："></a>Process属性：</h6><p>-<code>stdout</code>//标准输出流。<br>-<code>stderr</code>//标准错误流<br>-<code>stdin</code>//标准输入流。<br>-<code>argv</code>//argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。<br>-<code>execPath</code>//返回执行当前脚本的 Node 二进制文件的绝对路径。<br>-<code>execArgv</code>//返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。<br>-<code>env</code>//返回一个对象，成员为当前 shell 的环境变量<br>-<code>exitCode</code>//进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。<br>-<code>version</code>//Node 的版本，比如v0.10.18。<br>-<code>versions</code>//一个属性，包含了 node 的版本和依赖.<br>-<code>config</code>//一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 “config.gypi” 文件相同。<br>-<code>pid</code>//当前进程的进程号。<br>-<code>title</code>//进程名，默认值为”node”，可以自定义该值。<br>-<code>arch</code>//当前 CPU 的架构：’arm’、’ia32’ 或者 ‘x64’。<br>-<code>platform</code>//运行程序所在的平台系统 ‘darwin’, ‘freebsd’, ‘linux’, ‘sunos’ 或 ‘win32’<br>-<code>mainModule</code>//require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。</p>
<h5 id="方法参考手册"><a href="#方法参考手册" class="headerlink" title="方法参考手册:"></a>方法参考手册:</h5><p>-<code>abort()</code>//这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。<br>-<code>chdir(directory)</code>//改变当前工作进程的目录，如果操作失败抛出异常。<br>-<code>cwd()</code>//返回当前进程的工作目录<br>-<code>exit([code])</code>//使用指定的 code 结束进程。如果忽略，将会使用 code 0。<br>-<code>getgid()</code>//获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setgid(id)</code>//设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。<br>//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>getuid()</code>//获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setuid(id)</code>//设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。<br>//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>getgroups()</code>//返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setgroups(groups)</code>//设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>initgroups(user, extra_group)</code>//读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>kill(pid, [signal])</code>//发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 ‘SIGINT’ 或 ‘SIGHUP’。如果忽略，信号会是 ‘SIGTERM’。<br>-<code>memoryUsage()</code>//返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。<br>-<code>nextTick(callback)</code>//一旦当前事件循环结束，调用回到函数。<br>-<code>umask([mask])</code>//设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。<br>-<code>uptime()</code>//返回 Node 已经运行的秒数。<br>-<code>hrtime()</code>//返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;9、Node-js-全局对象&quot;&gt;&lt;a href=&quot;#9、Node-js-全局对象&quot; class=&quot;headerlink&quot; title=&quot;9、Node.js 全局对象&quot;&gt;&lt;/a&gt;9、Node.js 全局对象&lt;/h3&gt;&lt;p&gt;在浏览器 &lt;code&gt;JavaScript&lt;/code&gt; 中，通常 &lt;code&gt;window&lt;/code&gt; 是全局对象， 而 &lt;code&gt;Node.js&lt;/code&gt; 中的全局对象是 &lt;code&gt;global&lt;/code&gt;，所有全局变量（除了 &lt;code&gt;global&lt;/code&gt;本身以外）都是 &lt;code&gt;global&lt;/code&gt; 对象的属性。 在 &lt;code&gt;Node.js&lt;/code&gt; 我们可以直接访问到 &lt;code&gt;global&lt;/code&gt; 的属性，而不需要在应用中包含它。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 路由(8)</title>
    <link href="https://wpneu.github.io/2016/06/28/Node.js%20%E8%B7%AF%E7%94%B1.html"/>
    <id>https://wpneu.github.io/2016/06/28/Node.js 路由.html</id>
    <published>2016-06-28T10:55:08.000Z</published>
    <updated>2017-07-30T07:21:47.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8、Node-js-路由"><a href="#8、Node-js-路由" class="headerlink" title="8、Node.js 路由"></a>8、Node.js 路由</h3><p>我们要为路由提供请求的<code>URL</code>和其他需要的<code>GET</code>及<code>POST</code>参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看<code>HTTP</code>请求，从中提取出请求的<code>URL</code>以及<code>GET/POST</code>参数。我们需要的所有数据都会包含在<code>request</code>对象中，该对象作为<code>onRequest()</code>回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的<code>Node.JS</code>模块，它们分别是<code>url</code>和<code>querystring</code>模块。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">                   url.parse(string).query</div><div class="line">                                           |</div><div class="line">           url.parse(string).pathname      |</div><div class="line">                       |                   |</div><div class="line">                       |                   |</div><div class="line">                     ------ -------------------</div><div class="line">http:<span class="comment">//localhost:8888/start?foo=bar&amp;hello=world</span></div><div class="line">                                ---       -----</div><div class="line">                                 |          |</div><div class="line">                                 |          |</div><div class="line">              querystring(string)[<span class="string">"foo"</span>]    |</div><div class="line">                                            |</div><div class="line">                         querystring(string)[<span class="string">"hello"</span>]</div></pre></td></tr></table></figure></p>
<p>当然我们也可以用<code>querystring</code>模块来解析<code>POST</code>请求体中的参数，稍后会有演示。<br>现在我们来给<code>onRequest()</code>函数加上一些逻辑，用来找出浏览器请求的<code>URL</code>路径：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">"received."</span>);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>现在我们可以来编写路由了，建立一个名为<code>router.js</code>的文件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">&#125;</div><div class="line">exports.route = route;</div></pre></td></tr></table></figure></p>
<p>在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的<code>start()</code>函数，以便将路由函数作为参数传递过去：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">"received."</span>);</div><div class="line">    route(pathname);<span class="comment">//路由函数</span></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>同时，我们会相应扩展<code>index.js</code>，使得路由函数可以被注入到服务器中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line">server.start(router.route);</div></pre></td></tr></table></figure></p>
<p>现在启动应用（<code>node index.js</code>），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">node index.js</div><div class="line">Request <span class="keyword">for</span> /foo received.</div><div class="line">About to route a request <span class="keyword">for</span> /foo</div><div class="line"><span class="comment">//以上输出已经去掉了比较烦人的`/favicon.ico`请求相关的部分。</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;8、Node-js-路由&quot;&gt;&lt;a href=&quot;#8、Node-js-路由&quot; class=&quot;headerlink&quot; title=&quot;8、Node.js 路由&quot;&gt;&lt;/a&gt;8、Node.js 路由&lt;/h3&gt;&lt;p&gt;我们要为路由提供请求的&lt;code&gt;URL&lt;/code&gt;和其他需要的&lt;code&gt;GET&lt;/code&gt;及&lt;code&gt;POST&lt;/code&gt;参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看&lt;code&gt;HTTP&lt;/code&gt;请求，从中提取出请求的&lt;code&gt;URL&lt;/code&gt;以及&lt;code&gt;GET/POST&lt;/code&gt;参数。我们需要的所有数据都会包含在&lt;code&gt;request&lt;/code&gt;对象中，该对象作为&lt;code&gt;onRequest()&lt;/code&gt;回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的&lt;code&gt;Node.JS&lt;/code&gt;模块，它们分别是&lt;code&gt;url&lt;/code&gt;和&lt;code&gt;querystring&lt;/code&gt;模块。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js函数(7)</title>
    <link href="https://wpneu.github.io/2016/06/28/Node.js%E5%87%BD%E6%95%B0.html"/>
    <id>https://wpneu.github.io/2016/06/28/Node.js函数.html</id>
    <published>2016-06-28T07:20:07.000Z</published>
    <updated>2017-07-30T07:21:47.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7、Node-js函数"><a href="#7、Node-js函数" class="headerlink" title="7、Node.js函数"></a>7、Node.js函数</h3><p>Node.js中函数的使用与Javascript类似:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(word);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>) </span>&#123;</div><div class="line">  someFunction(value);</div><div class="line">&#125;</div><div class="line">execute(say, <span class="string">"Hello"</span>);</div></pre></td></tr></table></figure></p>
<p>以上代码中，我们把 <code>say</code> 函数作为<code>execute</code>函数的第一个变量进行了传递。这里返回的不是 <code>say</code> 的返回值，而是 <code>say</code> 本身！<a id="more"></a>这样一来， <code>say</code> 就变成了<code>execute</code> 中的本地变量 <code>someFunction</code> ，<code>execute</code>可以通过调用 <code>someFunction()</code> （带括号的形式）来使用 <code>say</code> 函数。 当然，因为 <code>say</code> 有一个变量， <code>execute</code> 在调用 <code>someFunction</code> 时可以传递这样一个变量。</p>
<h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>)</span>&#123;</div><div class="line">  someFunction(value);</div><div class="line">&#125;</div><div class="line">execute(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;<span class="built_in">console</span>.log(word)&#125;, <span class="string">"Hello"</span>);</div></pre></td></tr></table></figure></p>
<p>我们在 <code>execute</code> 接受第一个参数的地方直接定义了我们准备传递给 <code>execute</code> 的函数。 用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。</p>
<h4 id="函数传递是如何让HTTP服务器工作的"><a href="#函数传递是如何让HTTP服务器工作的" class="headerlink" title="函数传递是如何让HTTP服务器工作的"></a>函数传递是如何让HTTP服务器工作的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"Hello World"</span>);</div><div class="line">  response.end();</div><div class="line">&#125;).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;7、Node-js函数&quot;&gt;&lt;a href=&quot;#7、Node-js函数&quot; class=&quot;headerlink&quot; title=&quot;7、Node.js函数&quot;&gt;&lt;/a&gt;7、Node.js函数&lt;/h3&gt;&lt;p&gt;Node.js中函数的使用与Javascript类似:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;word&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(word);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;someFunction, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  someFunction(value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;execute(say, &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上代码中，我们把 &lt;code&gt;say&lt;/code&gt; 函数作为&lt;code&gt;execute&lt;/code&gt;函数的第一个变量进行了传递。这里返回的不是 &lt;code&gt;say&lt;/code&gt; 的返回值，而是 &lt;code&gt;say&lt;/code&gt; 本身！
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js模块系统(6)</title>
    <link href="https://wpneu.github.io/2016/06/28/Node.js%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html"/>
    <id>https://wpneu.github.io/2016/06/28/Node.js模块系统.html</id>
    <published>2016-06-28T03:32:07.000Z</published>
    <updated>2017-07-30T07:21:47.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="6、Node-js模块系统"><a href="#6、Node-js模块系统" class="headerlink" title="6、Node.js模块系统"></a>6、Node.js模块系统</h3><p>Node.js 提供了<code>exports</code> 和 <code>require</code> 两个对象，其中 <code>exports</code> 是模块公开的接口，<code>require</code> 用于从外部获取一个模块的接口，即所获取模块的 <code>exports</code> 对象。<br><a id="more"></a><br>实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hello.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> name;</div><div class="line">  <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>)</span>&#123;</div><div class="line">    name = thyName;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span>+ name);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = Hello;</div><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">var</span> Hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</div><div class="line">hello = <span class="keyword">new</span> Hello();</div><div class="line">hello.setName(<span class="string">'BYVoid'</span>);</div><div class="line">hello.sayHello();</div></pre></td></tr></table></figure></p>
<h4 id="服务端的模块放在哪里"><a href="#服务端的模块放在哪里" class="headerlink" title="服务端的模块放在哪里"></a>服务端的模块放在哪里</h4><p>我们已经在代码中使用了模块了。像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">...</div><div class="line">http.createServer(...);</div></pre></td></tr></table></figure></p>
<p>Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。这把我们的本地变量变成了一个拥有所有 <code>http</code> 模块所提供的公共方法的对象。<br>Node.js 的 <code>require</code>方法中的文件查找策略如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">开始require--&gt;</div><div class="line">  if (在文件模块缓存区中) &#123;</div><div class="line">    返回exports.</div><div class="line">  &#125; else&#123;</div><div class="line">    if (是原生模块) &#123;</div><div class="line">      if (在原生模块缓存区中) &#123;</div><div class="line">        返回exports.</div><div class="line">      &#125; else&#123;</div><div class="line">        加载原生模块--&gt;缓存原生模块--&gt;返回exports.</div><div class="line">      &#125;;</div><div class="line">    &#125; else&#123;</div><div class="line">      查找文件模块--&gt;根据扩展名载入文件模块--&gt;缓存文件模块--&gt;返回exports.</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure></p>
<h4 id="从文件模块缓存中加载"><a href="#从文件模块缓存中加载" class="headerlink" title="从文件模块缓存中加载"></a>从文件模块缓存中加载</h4><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>
<h4 id="从原生模块加载"><a href="#从原生模块加载" class="headerlink" title="从原生模块加载 */"></a>从原生模块加载 */</h4><p>原生模块的优先级仅次于文件模块缓存的优先级。<code>require</code>方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个<code>http/http.js/http.node/http.json</code>文件，<code>require(&quot;http&quot;)</code>都不会从这些文件中加载，而是从原生模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。</p>
<h4 id="从文件加载"><a href="#从文件加载" class="headerlink" title="从文件加载 */"></a>从文件加载 */</h4><p>当文件模块缓存中不存在，而且不是原生模块的时候，<code>Node.js</code>会解析<code>require</code>方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br><code>require</code>方法接受以下几种参数的传递:<br>  <code>http、fs、path</code>等，原生模块。<br>  <code>./mod</code>或<code>../mod</code>，相对路径的文件模块。<br>  <code>/pathtomodule/mod</code>，绝对路径的文件模块。<br>  <code>mod</code>，非原生模块的文件模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;6、Node-js模块系统&quot;&gt;&lt;a href=&quot;#6、Node-js模块系统&quot; class=&quot;headerlink&quot; title=&quot;6、Node.js模块系统&quot;&gt;&lt;/a&gt;6、Node.js模块系统&lt;/h3&gt;&lt;p&gt;Node.js 提供了&lt;code&gt;exports&lt;/code&gt; 和 &lt;code&gt;require&lt;/code&gt; 两个对象，其中 &lt;code&gt;exports&lt;/code&gt; 是模块公开的接口，&lt;code&gt;require&lt;/code&gt; 用于从外部获取一个模块的接口，即所获取模块的 &lt;code&gt;exports&lt;/code&gt; 对象。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://wpneu.github.io/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://wpneu.github.io/tags/node/"/>
    
  </entry>
  
</feed>
